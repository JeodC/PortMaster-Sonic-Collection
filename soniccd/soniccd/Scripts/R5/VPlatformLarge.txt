//--------------Sonic CD VPlatform Large Script---------------//
//--------Scripted by Christian Whitehead 'The Taxman'--------//
//-------Unpacked By Rubberduckycooly's Script Unpacker-------//

// Aliases
#alias Object.Value0	:	Object.Oscillation
#alias Object.Value1	:	Object.PlatformY
#alias Object.Value2	:	Object.ChangeY
#alias Object.Value3	:	Object.Angle

// HUD Alias
#alias Object[24].PropertyValue : HUD.CurrentTimePeriod

// Time Period Aliases
#alias 0	:	TIME_PRESENT
#alias 1	:	TIME_PAST
#alias 2	:	TIME_GOOD_FUTURE
#alias 3	:	TIME_BAD_FUTURE

// Property Values
#alias 0	:	DOWNWARDS_PLAT
#alias 1	:	DOWNWARDS_PLAT_UNUSED
#alias 2	:	DOWNWARDS_PLAT_CONV
#alias 3	:	UPWARDS_PLAT
#alias 4	:	UPWARDS_PLAT_UNUSED
#alias 5	:	UPWARDS_PLAT_CONV


sub ObjectMain
	
	// Update the Platform's base Oscillation Value
	Object.Oscillation++
	if Object.Oscillation == 312
		Object.Oscillation = 0
	end if
	
	// From that Oscillation Value, get the Angle for the Platform to be at
	// The result will range somewhere from 0 to 510
	Object.Angle = Object.Oscillation
	Object.Angle <<= 6
	Object.Angle /= 39
	
	// Get the base Y change value for the Platform
	Sin(Object.ChangeY, Object.Angle)
	
	// And from here, jump to the specific handling case needed for the different Platform types
	switch Object.PropertyValue
	case DOWNWARDS_PLAT
	case DOWNWARDS_PLAT_CONV
		// Downwards Platform
		Object.ChangeY *= 0x1800
		Object.ChangeY += 0x300000
		Object.ChangeY += Object.YPos
		Object.ChangeY &= 0xFFFF0000 // Truncate the value
		Object.ChangeY -= Object.PlatformY
		break
		
	case UPWARDS_PLAT
	case UPWARDS_PLAT_CONV
		// Upwards Platform
		Object.ChangeY *= -0x1800
		Object.ChangeY -= 0x300000
		Object.ChangeY += Object.YPos
		Object.ChangeY &= 0xFFFF0000 // Truncate the value
		Object.ChangeY -= Object.PlatformY
		break
		
	case DOWNWARDS_PLAT_UNUSED
		// Unused duplicate of down Platform
		Object.ChangeY *= 0x1800
		Object.ChangeY += 0x300000
		Object.ChangeY += Object.YPos
		Object.ChangeY &= 0xFFFF0000 // Truncate the value
		Object.ChangeY -= Object.PlatformY
		break
		
	case UPWARDS_PLAT_UNUSED
		// Unused duplicate of upwards Platform
		Object.ChangeY *= -0x1800
		Object.ChangeY -= 0x300000
		Object.ChangeY += Object.YPos
		Object.ChangeY &= 0xFFFF0000 // Truncate the value
		Object.ChangeY -= Object.PlatformY
		break
		
	end switch
	
end sub


sub ObjectPlayerInteraction
	
	// First, back up the Object's base Y Position
	TempValue0 = Object.YPos
	
	// Then, move the Object to where its Platform is
	Object.YPos = Object.PlatformY
	
	// From here, jump as needed to the needed Platform type
	switch Object.PropertyValue
	case DOWNWARDS_PLAT
	case UPWARDS_PLAT
		// Standard Platform
		PlayerObjectCollision(C_PLATFORM, -48, -16, 48, 12)
		if CheckResult == true
			// Move the Player along with the Platform to keep them on
			Player.YPos += Object.ChangeY
		end if
		break
		
	case DOWNWARDS_PLAT_CONV
	case UPWARDS_PLAT_CONV
		// Conveyor Platform
		PlayerObjectCollision(C_PLATFORM, -48, -16, 48, 12)
		if CheckResult == true
			
			// Move the Player vertically to say with the Platform
			Player.YPos += Object.ChangeY
			
			// And then move the player horizontally as needed with the Conveyor Belt
			if ConveyorBelt_Flag == 0
				Player.XPos += ConveyorBelt_Speed
			else
				Player.XPos -= ConveyorBelt_Speed
			end if
			
		end if
		break
		
	end switch
	
	// And now restore the Object's base Y Position
	Object.YPos = TempValue0
	
end sub


sub ObjectDraw

	switch Object.PropertyValue
	case DOWNWARDS_PLAT
	case DOWNWARDS_PLAT_UNUSED
		// Standard downwards Platform
		Sin(Object.PlatformY, Object.Angle)
		Object.PlatformY *= 0x1800
		Object.PlatformY += 0x300000
		Object.PlatformY += Object.YPos
		Object.PlatformY &= 0xFFFF0000 // Truncate the value
		DrawSpriteXY(0, Object.XPos, Object.PlatformY)
		break
		
	case DOWNWARDS_PLAT_CONV
		// Downwards Conveyor Platform
		Sin(Object.PlatformY, Object.Angle)
		Object.PlatformY *= 0x1800
		Object.PlatformY += 0x300000
		Object.PlatformY += Object.YPos
		Object.PlatformY &= 0xFFFF0000 // Truncate the value
		DrawSpriteXY(0, Object.XPos, Object.PlatformY)
		DrawSpriteXY(1, Object.XPos, Object.PlatformY)
		break
		
	case UPWARDS_PLAT
	case UPWARDS_PLAT_UNUSED
		// Standard upwards Platform
		Sin(Object.PlatformY, Object.Angle)
		Object.PlatformY *= -0x1800
		Object.PlatformY -= 0x300000
		Object.PlatformY += Object.YPos
		Object.PlatformY &= 0xFFFF0000 // Truncate the value
		DrawSpriteXY(0, Object.XPos, Object.PlatformY)
		break
		
	case UPWARDS_PLAT_CONV
		// Upwards Conveyor Platform
		Sin(Object.PlatformY, Object.Angle)
		Object.PlatformY *= -0x1800
		Object.PlatformY -= 0x300000
		Object.PlatformY += Object.YPos
		Object.PlatformY &= 0xFFFF0000 // Truncate the value
		DrawSpriteXY(0, Object.XPos, Object.PlatformY)
		DrawSpriteXY(1, Object.XPos, Object.PlatformY)
		break
		
	end switch
	
end sub


sub ObjectStartup
	
	// Use different Sprites for the different Time Periods
	switch HUD.CurrentTimePeriod
	case TIME_PRESENT
		LoadSpriteSheet("R5/Objects.gif")
		SpriteFrame(-48, -16, 96, 32, 1, 84)
		SpriteFrame(-48, -16, 96, 16, 1, 191)
		break
		
	case TIME_PAST
		LoadSpriteSheet("R5/Objects3.gif")
		SpriteFrame(-48, -16, 96, 32, 1, 203)
		SpriteFrame(-48, -16, 96, 16, 159, 131)
		break
		
	case TIME_GOOD_FUTURE
		LoadSpriteSheet("R5/Objects3.gif")
		SpriteFrame(-48, -16, 96, 32, 1, 203)
		SpriteFrame(-48, -16, 96, 16, 159, 165)
		break
		
	case TIME_BAD_FUTURE
		LoadSpriteSheet("R5/Objects3.gif")
		SpriteFrame(-48, -16, 96, 32, 1, 203)
		SpriteFrame(-48, -16, 96, 16, 159, 199)
		break
		
	end switch
	
end sub


// ========================
// Editor Subs
// ========================

sub RSDKEdit
	if Editor.ReturnVariable == true
		switch Editor.VariableID
		case EDIT_VAR_PROPVAL // Property Value
			CheckResult = Object.PropertyValue
			break
		case 0 // Direction
			CheckResult = Object.PropertyValue
			break
		end switch
	else
		switch Editor.VariableID
		case EDIT_VAR_PROPVAL // Property Value
			Object.PropertyValue = Editor.VariableValue
			break
		case 0 // Direction
			Object.PropertyValue = Editor.VariableValue
			break
		end switch
	end if
end sub


sub RSDKDraw
	TempValue2 = false
	
	switch Object.PropertyValue
	case 2
		TempValue2 = true
	case 0
	default
		TempValue0 = 0x1800
		TempValue1 = 0x300000
		break
		
	case 5
		TempValue2 = true
	case 3
		TempValue0 *= -0x1800
		TempValue1 -= 0x300000
		break
		
	end switch
	
	TempValue3 = Object.YPos
	TempValue3 &= 0xFFFF0000 // Truncate the value
	DrawSpriteXY(0, Object.XPos, TempValue3)
	
	if TempValue2 == true
		DrawSpriteXY(1, Object.XPos, TempValue3)
	end if
	
	if Editor.ShowGizmos == true
		
		// Draw the Platform's path as a line
		
		Sin(TempValue4, 128)
		TempValue4 *= TempValue0
		TempValue4 += TempValue1
		TempValue4 += Object.YPos
		TempValue4 &= 0xFFFF0000 // Truncate the value
		
		Editor.DrawingOverlay = true
		
		DrawLine(Object.XPos, TempValue3, Object.XPos, TempValue4, 255, 255, 255)
		
		Editor.DrawingOverlay = false
		
	end if
end sub


sub RSDKLoad
	LoadSpriteSheet("R5/Objects.gif")
	// TODO: using present frames here, do something for other time periods
	SpriteFrame(-48, -16, 96, 32, 1, 84)
	SpriteFrame(-48, -16, 96, 16, 1, 191)

	AddEditorVariable("Direction")
	SetActiveVariable("Direction")
	AddEnumVariable("Downwards", 0)
	// 1 is unused
	AddEnumVariable("Downwards (Conveyor)", 2)
	AddEnumVariable("Upwards", 3)
	// 4 is unused
	AddEnumVariable("Upwards (Conveyor)", 5)
end sub
