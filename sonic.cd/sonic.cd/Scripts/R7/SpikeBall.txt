//-----------------Sonic CD Spike Ball Script-----------------//
//--------Scripted by Christian Whitehead 'The Taxman'--------//
//-------Unpacked By Rubberduckycooly's Script Unpacker-------//

// Aliases

// Can be either X or Y-based, depending on the Object's Property Value
#alias Object.Value2			: Object.Velocity

// Value3 is unused...

// Timers
// (These count towards the "Time" values, at which point states switch)
#alias Object.Value0			: Object.PauseTimer
#alias Object.Value1			: Object.MoveTimer

// Durations
// (How long, in frames, the SpikeBall will do the action for)
#alias Object.Value4			: Object.ShootTime
#alias Object.Value5			: Object.RetractTime
#alias Object.Value6			: Object.PauseTime

// HUD Alias
#alias Object[24].PropertyValue	: HUD.CurrentTimePeriod

// States
#alias 0 : SPIKEBALL_H_MOVERIGHT
#alias 1 : SPIKEBALL_H_PAUSERIGHT
#alias 2 : SPIKEBALL_H_MOVELEFT
#alias 3 : SPIKEBALL_H_PAUSELEFT

#alias 4 : SPIKEBALL_V_MOVEDOWN
#alias 5 : SPIKEBALL_V_PAUSEDOWN
#alias 6 : SPIKEBALL_V_MOVEUP
#alias 7 : SPIKEBALL_V_PAUSEUP

// Time Periods
#alias 0 : TIME_PRESENT
#alias 1 : TIME_PAST
#alias 2 : TIME_GOOD_FUTURE
#alias 3 : TIME_BAD_FUTURE

// Property Values
#alias 0 : SPIKEBALL_TYPE_H
#alias 1 : SPIKEBALL_TYPE_V


sub ObjectMain
	
	switch Object.State
	
	// Horizontal Spike Ball States
	case SPIKEBALL_H_MOVERIGHT
		if Object.MoveTimer < Object.ShootTime
			Object.MoveTimer++
			Object.XPos += Object.Velocity
		else
			Object.State++
		end if
		break
		
	case SPIKEBALL_H_PAUSERIGHT
		if Object.PauseTimer < Object.PauseTime
			Object.PauseTimer++
		else
			Object.PauseTimer = 0
			Object.State++
		end if
		break
		
	case SPIKEBALL_H_MOVELEFT
		if Object.MoveTimer > Object.RetractTime
			Object.MoveTimer--
			Object.XPos -= Object.Velocity
		else
			Object.State++
		end if
		break
		
	case SPIKEBALL_H_PAUSELEFT
		if Object.PauseTimer < Object.PauseTime
			Object.PauseTimer++
		else
			Object.PauseTimer = 0
			Object.State = SPIKEBALL_H_MOVERIGHT
		end if
		break
		
		
	// Vertical Spike Ball States
	case SPIKEBALL_V_MOVEDOWN
		if Object.MoveTimer < Object.ShootTime
			Object.MoveTimer++
			Object.YPos += Object.Velocity
		else
			Object.State++
		end if
		break
		
	case SPIKEBALL_V_PAUSEDOWN
		if Object.PauseTimer < Object.PauseTime
			Object.PauseTimer++
		else
			Object.PauseTimer = 0
			Object.State++
		end if
		break
		
	case SPIKEBALL_V_MOVEUP
		if Object.MoveTimer > Object.RetractTime
			Object.MoveTimer--
			Object.YPos -= Object.Velocity
		else
			Object.State++
		end if
		break
		
	case SPIKEBALL_V_PAUSEUP
		if Object.PauseTimer < Object.PauseTime
			Object.PauseTimer++
		else
			Object.PauseTimer = 0
			Object.State = SPIKEBALL_V_MOVEDOWN
		end if
		break
		
	end switch
	
end sub


sub ObjectPlayerInteraction
	
	PlayerObjectCollision(C_TOUCH, -12, -12, 12, 12)
	
	if CheckResult == true
		CallFunction(Player_Hit)
	end if
	
end sub


sub ObjectDraw
	DrawSprite(0)
end sub


sub ObjectStartup
	LoadSpriteSheet("R7/Objects.gif")
	
	// Spike Ball Frame
	SpriteFrame(-16, -16, 32, 32, 1, 199)
	
	ArrayPos0 = 32
	while ArrayPos0 < 1056
		if Object[ArrayPos0].Type == TypeName[Spike Ball]
		
			if Object[ArrayPos0].PropertyValue == SPIKEBALL_TYPE_V
				Object[ArrayPos0].State = SPIKEBALL_V_MOVEDOWN
				
				switch HUD.CurrentTimePeriod
				case TIME_PRESENT
					Object[ArrayPos0].Velocity = 0x20000
					Object[ArrayPos0].ShootTime = 16
					Object[ArrayPos0].RetractTime = -16
					Object[ArrayPos0].PauseTime = 40
					break
					
				case TIME_PAST
					Object[ArrayPos0].Velocity = 0x40000
					Object[ArrayPos0].ShootTime = 8
					Object[ArrayPos0].RetractTime = -8
					Object[ArrayPos0].PauseTime = 60
					break
					
				case TIME_GOOD_FUTURE
				case TIME_BAD_FUTURE
					Object[ArrayPos0].Velocity = 0x10000
					Object[ArrayPos0].ShootTime = 32
					Object[ArrayPos0].RetractTime = -32
					Object[ArrayPos0].PauseTime = 20
					break
					
				end switch
			else
				switch HUD.CurrentTimePeriod
				case TIME_PRESENT
					Object[ArrayPos0].Velocity = 0x20000
					Object[ArrayPos0].ShootTime = 24
					Object[ArrayPos0].RetractTime = -24
					Object[ArrayPos0].PauseTime = 40
					break
					
				case TIME_PAST
					Object[ArrayPos0].Velocity = 0x40000
					Object[ArrayPos0].ShootTime = 12
					Object[ArrayPos0].RetractTime = -12
					Object[ArrayPos0].PauseTime = 60
					break
					
				case TIME_GOOD_FUTURE
				case TIME_BAD_FUTURE
					Object[ArrayPos0].Velocity = 0x10000
					Object[ArrayPos0].ShootTime = 48
					Object[ArrayPos0].RetractTime = -48
					Object[ArrayPos0].PauseTime = 20
					break
					
				end switch
			end if
			
		end if
		
		ArrayPos0++
	loop
	
end sub


// ========================
// Editor Subs
// ========================

sub RSDKEdit
	if Editor.ReturnVariable == true
		switch Editor.VariableID
		case EDIT_VAR_PROPVAL // Property Value
		case 0 // Type
			CheckResult = Object.PropertyValue
			break
		end switch
	else
		switch Editor.VariableID
		case EDIT_VAR_PROPVAL // Property Value
		case 0 // Type
			Object.PropertyValue = Editor.VariableValue
			break
		end switch
	end if
end sub


sub RSDKDraw
	DrawSprite(0)
	
	// TODO: it would be cool to see the path of the spike ball via an arrow
	// however, spike movement is dependant on time period, so that complicates things...
	// update: woahhh we live in post-Origns CheckCurrentStageFolder era now, i think that may be possible
	// the following (as well as the time period func) are incredibly scuffed, bring them up to snuff eventually
	
	if Editor.ShowGizmos == true
		Editor.DrawingOverlay = true
		
		CallFunction(EditorHelpers_FindTimePeriod)
		
		Object.InkEffect = 1
		
		if Object.PropertyValue == SPIKEBALL_TYPE_V
			switch CheckResult
			case TIME_PRESENT
				Object.Velocity = 0x20000
				Object.ShootTime = 16
				Object.RetractTime = -16
				Object.PauseTime = 40
				break
				
			case TIME_PAST
				Object.Velocity = 0x40000
				Object.ShootTime = 8
				Object.RetractTime = -8
				Object.PauseTime = 60
				break
				
			case TIME_GOOD_FUTURE
			case TIME_BAD_FUTURE
				Object.Velocity = 0x10000
				Object.ShootTime = 32
				Object.RetractTime = -32
				Object.PauseTime = 20
				break
				
			end switch
			
			TempValue0 = Object.Velocity
			TempValue0 *= Object.ShootTime
			
			TempValue1 = Object.Velocity
			TempValue1 *= Object.RetractTime
			
			TempValue0 += Object.YPos
			TempValue1 += Object.YPos
			
			DrawSpriteFX(0, FX_INK, Object.XPos, TempValue0)
			DrawSpriteFX(0, FX_INK, Object.XPos, TempValue1)
			
			DrawLine(Object.XPos, TempValue0, Object.XPos, TempValue1, 255, 255, 255)
			
		else
			switch CheckResult
			case TIME_PRESENT
				Object.Velocity = 0x20000
				Object.ShootTime = 24
				Object.RetractTime = -24
				Object.PauseTime = 40
				break
				
			case TIME_PAST
				Object.Velocity = 0x40000
				Object.ShootTime = 12
				Object.RetractTime = -12
				Object.PauseTime = 60
				break
				
			case TIME_GOOD_FUTURE
			case TIME_BAD_FUTURE
				Object.Velocity = 0x10000
				Object.ShootTime = 48
				Object.RetractTime = -48
				Object.PauseTime = 20
				break
				
			end switch
			
			TempValue0 = Object.Velocity
			TempValue0 *= Object.ShootTime
			
			TempValue1 = Object.Velocity
			TempValue1 *= Object.RetractTime
			
			TempValue0 += Object.XPos
			TempValue1 += Object.XPos
			
			DrawSpriteFX(0, FX_INK, TempValue0, Object.YPos)
			DrawSpriteFX(0, FX_INK, TempValue1, Object.YPos)
			
			DrawLine(TempValue0, Object.YPos, TempValue1, Object.YPos, 255, 255, 255)
			
		end if
		
		Editor.DrawingOverlay = false
	end if
end sub


sub RSDKLoad
	LoadSpriteSheet("R7/Objects.gif")
	SpriteFrame(-16, -16, 32, 32, 1, 199)

	AddEditorVariable("Type")
	SetActiveVariable("Type")
	AddEnumVariable("Horizontal", SPIKEBALL_TYPE_H)
	AddEnumVariable("Vertical",   SPIKEBALL_TYPE_V)
end sub
