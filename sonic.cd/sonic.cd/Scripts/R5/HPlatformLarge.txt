//--------------Sonic CD HPlatform Large Script---------------//
//--------Scripted by Christian Whitehead 'The Taxman'--------//
//-------Unpacked By Rubberduckycooly's Script Unpacker-------//

// Aliases
#alias Object.Value0			:	Object.Pressed

#alias Object.Value1			:	Object.PlatformY
#alias Object.Value2			:	Object.ChangeY

#alias Object.Value3			:	Object.PlatformX
#alias Object.Value4			:	Object.ChangeX

#alias Object.Value5			:	Object.Angle
#alias Object.Value6			:	Object.Oscillation

#alias Object.Value7			:	Object.Cooldown

// HUD Alias
#alias Object[24].PropertyValue	:	HUD.CurrentTimePeriod

// Time Period Aliases
#alias 0	:	TIME_PRESENT
#alias 1	:	TIME_PAST
#alias 2	:	TIME_GOOD_FUTURE
#alias 3	:	TIME_BAD_FUTURE

// Property Values
#alias 0	:	START_MOVING_RIGHT
#alias 1	:	START_MOVING_RIGHT_W/SPRING
#alias 2	:	START_MOVING_RIGHT_W/CONV
#alias 3	:	START_MOVING_LEFT
#alias 4	:	START_MOVING_LEFT_W/SPRING
#alias 5	:	START_MOVING_LEFT_W/CONV



sub ObjectMain
	
	// Update this Object's Oscillation Value
	// 312 may seem like a rather random value, but you'll see why it's used in a moment...
	Object.Oscillation++
	if Object.Oscillation == 312
		Object.Oscillation = 0
	end if
	
	// From this Oscillation value, get the object's Angle
	// This Angle will range from 0-510
	Object.Angle   = Object.Oscillation
	Object.Angle <<= 6
	Object.Angle  /= 39
	
	// And then from this Angle, get the base X Change Value
	Sin(Object.ChangeX, Object.Angle)
	
	switch Object.PropertyValue
	case START_MOVING_RIGHT
	case START_MOVING_RIGHT_W/CONV
		// Right-moving Platform
		Object.ChangeX *= 0x1800
		Object.ChangeX += 0x300000
		Object.ChangeX += Object.XPos
		Object.ChangeX &= 0xFFFF0000 // Truncate the value
		Object.ChangeX -= Object.PlatformX
		break
		
	case START_MOVING_LEFT
	case START_MOVING_LEFT_W/CONV
		// Left-moving Platform
		Object.ChangeX *= -0x1800
		Object.ChangeX -= 0x300000
		Object.ChangeX += Object.XPos
		Object.ChangeX &= 0xFFFF0000 // Truncate the value
		Object.ChangeX -= Object.PlatformX
		break
		
	case START_MOVING_RIGHT_W/SPRING
		// Right-moving Carrier Platform
		Object.ChangeX *= 0x1800
		Object.ChangeX += 0x300000
		Object.ChangeX += Object.XPos
		Object.ChangeX &= 0xFFFF0000 // Truncate the value
		
		// Move the first following Object
		
		// Make it 32 pixels to the left of this Object
		Object[+1].XPos = Object.ChangeX
		Object[+1].XPos -= 0x200000
		
		// And 24 pixels above
		Object[+1].YPos = Object.YPos
		Object[+1].YPos -= 0x180000
		
		// And then comes the second following Object
		
		// This one will be in the center of the Platform
		Object[+2].XPos = Object.ChangeX
		
		// And also 24 pixels above
		Object[+2].YPos = Object.YPos
		Object[+2].YPos -= 0x180000
		
		// And then the last, third riding Object
		
		// 32 pixels to the right
		Object[+3].XPos = Object.ChangeX
		Object[+3].XPos += 0x200000
		
		// And, of course, 24 pixels above again
		Object[+3].YPos = Object.YPos
		Object[+3].YPos -= 0x180000
		
		Object.ChangeX -= Object.PlatformX
		break
		
	case START_MOVING_LEFT_W/SPRING
		// Left-moving Carrier Platform
		Object.ChangeX *= -0x1800
		Object.ChangeX -= 0x300000
		Object.ChangeX += Object.XPos
		Object.ChangeX &= 0xFFFF0000 // Truncate the value
		
		// Move the first Following Object
		
		// 32 pixels to the left
		Object[+1].XPos = Object.ChangeX
		Object[+1].XPos -= 0x200000
		
		// 24 pixels above
		Object[+1].YPos = Object.YPos
		Object[+1].YPos -= 0x180000
		
		// Next Object!
		
		// Same X as the Platform
		Object[+2].XPos = Object.ChangeX
		
		// 24 pixels above
		Object[+2].YPos = Object.YPos
		Object[+2].YPos -= 0x180000
		
		// Final Rider Object!
		
		// 32 pixels right
		Object[+3].XPos = Object.ChangeX
		Object[+3].XPos += 0x200000
		
		// And 24 pixels above
		Object[+3].YPos = Object.YPos
		Object[+3].YPos -= 0x180000
		
		Object.ChangeX -= Object.PlatformX
		break
		
	end switch
	
	if Object.Pressed == true
		if Object.PlatformY < 16
			Object.PlatformY++
			TempValue0 = Object.PlatformY
			TempValue0 &= 3
			if TempValue0 == 3
				// Dip a pixel down
				Object.ChangeY = 0x10000
			else
				Object.ChangeY = 0
			end if
		else
			Object.ChangeY = 0
		end if
	else
		if Object.PlatformY > 0
			Object.PlatformY--
			TempValue0 = Object.PlatformY
			TempValue0 &= 3
			if TempValue0 == 3
				// Go back up a pixel
				Object.ChangeY = -0x10000
			else
				Object.ChangeY = 0
			end if
		else
			Object.ChangeY = 0
		end if
	end if
	
	Object.Pressed = false
	
end sub


sub ObjectPlayerInteraction
	
	// Before doing anything else, back up the Object's base position
	TempValue0 = Object.XPos
	
	// Then, move the Object to where its Platform is
	Object.XPos = Object.PlatformX
	
	// And now, jump to the handling type needed
	switch Object.PropertyValue
	case START_MOVING_RIGHT
	case START_MOVING_LEFT
		// Standard Platform
		
		PlayerObjectCollision(C_PLATFORM, -48, -16, 48, 12)
		
		if CheckResult == true
			
			// Since the Player's on the Platform, let the Platform Object know so it can dip
			Object.Pressed = true
			
			// And carry the Player along with the Platform
			Player.XPos += Object.ChangeX
			Player.YPos += Object.ChangeY
			
		end if
		break
		
	case START_MOVING_RIGHT_W/CONV
	case START_MOVING_LEFT_W/CONV
		// Conveyor Platform
		
		if Object.Cooldown == 0
			PlayerObjectCollision(C_PLATFORM, -48, -16, 48, 12)
			
			if CheckResult == true
				
				// Now that the Player's on the Platform, let the Platform Object know
				Object.Pressed = true
				
				// Move the Player along with the Platform to keep them on
				Player.XPos += Object.ChangeX
				Player.YPos += Object.ChangeY
				
				if ConveyorBelt_Flag == false
					Player.XPos += ConveyorBelt_Speed
				else
					Player.XPos -= ConveyorBelt_Speed
				end if
				
				// On the note of keeping the Player on the Platform...
				
				// Activate a small cooldown if the Player is seen to be on the edge of this Platform
				// This is to prevent an issue where the Player will repeatedly get pushed off and regrabbed by the Platform
				
				if Player.Animation == ANI_FLAILINGLEFT
					Object.Cooldown = 30
				end if
				if Player.Animation == ANI_FLAILINGRIGHT
					Object.Cooldown = 30
				end if
			end if
		else
			// Hold...
			Object.Cooldown--
		end if
		break
		
	end switch
	
	// And now restore the Object's Position
	Object.XPos = TempValue0
	
end sub


sub ObjectDraw
	
	// Move the Object to match where it should be
	Object.YPos += Object.ChangeY
	
	switch Object.PropertyValue
	case START_MOVING_RIGHT
	case START_MOVING_RIGHT_W/SPRING
		// Right-moving Platform
		Sin(Object.PlatformX, Object.Angle)
		Object.PlatformX *= 0x1800
		Object.PlatformX += 0x300000
		Object.PlatformX += Object.XPos
		Object.PlatformX &= 0xFFFF0000 // Truncate the value
		DrawSpriteXY(0, Object.PlatformX, Object.YPos)
		break
		
	case START_MOVING_RIGHT_W/CONV
		// Right-moving Conveyor Platform
		Sin(Object.PlatformX, Object.Angle)
		Object.PlatformX *= 0x1800
		Object.PlatformX += 0x300000
		Object.PlatformX += Object.XPos
		Object.PlatformX &= 0xFFFF0000 // Truncate the value
		DrawSpriteXY(0, Object.PlatformX, Object.YPos)
		DrawSpriteXY(1, Object.PlatformX, Object.YPos)
		break
		
	case START_MOVING_LEFT
	case START_MOVING_LEFT_W/SPRING
		// Left-moving Platform
		Sin(Object.PlatformX, Object.Angle)
		Object.PlatformX *= -0x1800
		Object.PlatformX -= 0x300000
		Object.PlatformX += Object.XPos
		Object.PlatformX &= 0xFFFF0000 // Truncate the value
		DrawSpriteXY(0, Object.PlatformX, Object.YPos)
		break
		
	case START_MOVING_LEFT_W/CONV
		// Left-moving Conveyor Platform
		Sin(Object.PlatformX, Object.Angle)
		Object.PlatformX *= -0x1800
		Object.PlatformX -= 0x300000
		Object.PlatformX += Object.XPos
		Object.PlatformX &= 0xFFFF0000 // Truncate the value
		DrawSpriteXY(0, Object.PlatformX, Object.YPos)
		DrawSpriteXY(1, Object.PlatformX, Object.YPos)
		break
		
	end switch
	
end sub


sub ObjectStartup
	
	LoadSpriteSheet("R5/Objects.gif")
	
	// Use different graphics for the different Time Periods
	switch HUD.CurrentTimePeriod
	case TIME_PRESENT
		LoadSpriteSheet("R5/Objects.gif")
		SpriteFrame(-48, -16, 96, 32, 1, 84)
		SpriteFrame(-48, -16, 96, 16, 1, 191)
		break
		
	case TIME_PAST
		LoadSpriteSheet("R5/Objects3.gif")
		SpriteFrame(-48, -16, 96, 32, 1, 203)
		SpriteFrame(-48, -16, 96, 16, 159, 131)
		break
		
	case TIME_GOOD_FUTURE
		LoadSpriteSheet("R5/Objects3.gif")
		SpriteFrame(-48, -16, 96, 32, 1, 203)
		SpriteFrame(-48, -16, 96, 16, 159, 165)
		break
		
	case TIME_BAD_FUTURE
		LoadSpriteSheet("R5/Objects3.gif")
		SpriteFrame(-48, -16, 96, 32, 1, 203)
		SpriteFrame(-48, -16, 96, 16, 159, 199)
		break
		
	end switch
	
end sub


// ========================
// Editor Subs
// ========================

sub RSDKDraw
	
	TempValue2 = false
	
	switch Object.PropertyValue
	case 2
		TempValue2 = true
	case 0
	case 1
		TempValue0 = 0x1800
		TempValue1 = 0x300000
		break
	
	
	case 5
		TempValue2 = true
	case 3
	case 4
		TempValue0 = -0x1800
		TempValue1 = -0x300000
		break
		
	end switch
	
	TempValue3 = Object.XPos
	TempValue3 &= 0xFFFF0000 // Truncate the value
	DrawSpriteXY(0, TempValue3, Object.YPos)
	DrawSpriteXY(TempValue2, TempValue3, Object.YPos)
	
	if Editor.ShowGizmos == true
		Editor.DrawingOverlay = true
		
		// Show the Platform's path
		
		Sin(TempValue4, 128)
		TempValue4 *= TempValue0
		TempValue4 += TempValue1
		TempValue4 += Object.XPos
		TempValue4 &= 0xFFFF0000 // Truncate the value
		
		DrawLine(TempValue3, Object.YPos, TempValue4, Object.YPos, 255, 255, 255)
		
		Editor.DrawingOverlay = false
	end if
	
end sub


sub RSDKLoad
	LoadSpriteSheet("R5/Objects.gif")
	// TODO: using present frames, why does r5 have like 20 platform objects i've wrote this comment like 19 times already
	SpriteFrame(-48, -16, 96, 32, 1, 84)
	SpriteFrame(-48, -16, 96, 16, 1, 191)

	AddEditorVariable("Direction")
	SetActiveVariable("Direction")
	AddEnumVariable("Right", 0)
	AddEnumVariable("Right (Spring)", 1)
	AddEnumVariable("Right (Conveyor)", 2)
	AddEnumVariable("Left", 3)
	AddEnumVariable("Left (Spring)", 4)
	AddEnumVariable("Left (Conveyor)", 5)
end sub
