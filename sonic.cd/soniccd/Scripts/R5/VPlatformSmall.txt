//--------------Sonic CD VPlatform Small Script---------------//
//--------Scripted by Christian Whitehead 'The Taxman'--------//
//-------Unpacked By Rubberduckycooly's Script Unpacker-------//

// Aliases
#alias Object.Value0 : Object.Oscillation
#alias Object.Value1 : Object.PlatformY
#alias Object.Value2 : Object.ChangeY
#alias Object.Value3 : Object.Angle

// HUD Alias
#alias Object[24].PropertyValue : HUD.CurrentTimePeriod

// Time Period Aliases
#alias 0	:	TIME_PRESENT
#alias 1	:	TIME_PAST
#alias 2	:	TIME_GOOD_FUTURE
#alias 3	:	TIME_BAD_FUTURE

// Property Values
#alias 0	:	DOWNWARDS_PLAT
#alias 1	:	DOWNWARDS_PLAT_UNUSED
#alias 2	:	DOWNWARDS_PLAT_CONV
#alias 3	:	UPWARDS_PLAT
#alias 4	:	UPWARDS_PLAT_UNUSED
#alias 5	:	UPWARDS_PLAT_CONV


sub ObjectMain
	
	// Update the Platform's Oscillation Value
	// (This value is stored per-Object, meaning that Platforms across the stage aren't synced)
	Object.Oscillation++
	if Object.Oscillation == 312
		Object.Oscillation = 0
	end if
	
	// Get the Object's Angle value
	// The final Angle value Will range from 0 to 510
	Object.Angle = Object.Oscillation
	Object.Angle <<= 6
	Object.Angle /= 39
	
	// Calculate its base Change value
	Sin(Object.ChangeY, Object.Angle)
	
	// From this base Change value, jump to the Platform handling type for what's further needed
	switch Object.PropertyValue
	case DOWNWARDS_PLAT
	case DOWNWARDS_PLAT_CONV
		// Downwards Platform
		Object.ChangeY *= 0x1800
		Object.ChangeY += 0x300000
		Object.ChangeY += Object.YPos
		Object.ChangeY &= 0xFFFF0000 // Truncate the value
		Object.ChangeY -= Object.PlatformY
		break
		
	case UPWARDS_PLAT
	case UPWARDS_PLAT_CONV
		// Upwards Platform
		Object.ChangeY *= -0x1800
		Object.ChangeY -= 0x300000
		Object.ChangeY += Object.YPos
		Object.ChangeY &= 0xFFFF0000 // Truncate the value
		Object.ChangeY -= Object.PlatformY
		break
		
	case DOWNWARDS_PLAT_UNUSED
		// Unused duplicate of downwards platform
		Object.ChangeY *= 0x1800
		Object.ChangeY += 0x300000
		Object.ChangeY += Object.YPos
		Object.ChangeY &= 0xFFFF0000 // Truncate the value
		Object.ChangeY -= Object.PlatformY
		break
		
	case UPWARDS_PLAT_UNUSED
		// Unused duplicate of upwards platform
		Object.ChangeY *= -0x1800
		Object.ChangeY -= 0x300000
		Object.ChangeY += Object.YPos
		Object.ChangeY &= 0xFFFF0000 // Truncate the value
		Object.ChangeY -= Object.PlatformY
		break
		
	end switch
	
end sub


sub ObjectPlayerInteraction
	
	// Back up the Object's position...
	TempValue0 = Object.YPos
	
	// ...and move the Object to where the Platform actually is
	Object.YPos = Object.PlatformY
	
	switch Object.PropertyValue
	case DOWNWARDS_PLAT
	case UPWARDS_PLAT
		// Normal Platform
		PlayerObjectCollision(C_PLATFORM, -16, -16, 16, 12)
		if CheckResult == true
			// Move the Player along with the Platform
			Player.YPos += Object.ChangeY
		end if
		break
		
	case DOWNWARDS_PLAT_CONV
	case UPWARDS_PLAT_CONV
		// Conveyor Platform
		PlayerObjectCollision(C_PLATFORM, -16, -16, 16, 12)
		if CheckResult == true
			
			// Move the Player to match the Platform
			Player.YPos += Object.ChangeY
			
			// And then push them along with the Conveyor Belt too as needed
			if ConveyorBelt_Flag == 0
				Player.XPos += ConveyorBelt_Speed
			else
				Player.XPos -= ConveyorBelt_Speed
			end if
			
		end if
		break
		
	end switch
	
	// Now that all the Collision's been done, it's safe to move the Object back now
	Object.YPos = TempValue0
	
end sub


sub ObjectDraw
	
	// All Platform types have their own Draw routines
	switch Object.PropertyValue
	case DOWNWARDS_PLAT
	case DOWNWARDS_PLAT_UNUSED
		// Standard Downards Platform
		Sin(Object.PlatformY, Object.Angle)
		Object.PlatformY *= 0x1800
		Object.PlatformY += 0x300000
		Object.PlatformY += Object.YPos
		Object.PlatformY &= 0xFFFF0000 // Truncate the value
		DrawSpriteXY(0, Object.XPos, Object.PlatformY)
		break
		
	case DOWNWARDS_PLAT_CONV
		// Downards Conveyor Platform
		Sin(Object.PlatformY, Object.Angle)
		Object.PlatformY *= 0x1800
		Object.PlatformY += 0x300000
		Object.PlatformY += Object.YPos
		Object.PlatformY &= 0xFFFF0000 // Truncate the value
		DrawSpriteXY(0, Object.XPos, Object.PlatformY)
		DrawSpriteXY(1, Object.XPos, Object.PlatformY)
		break
		
	case UPWARDS_PLAT
	case UPWARDS_PLAT_UNUSED
		// Standard Upwards Platform
		Sin(Object.PlatformY, Object.Angle)
		Object.PlatformY *= -0x1800
		Object.PlatformY -= 0x300000
		Object.PlatformY += Object.YPos
		Object.PlatformY &= 0xFFFF0000 // Truncate the value
		DrawSpriteXY(0, Object.XPos, Object.PlatformY)
		break
		
	case UPWARDS_PLAT_CONV
		// Upwards Conveyor Platform
		Sin(Object.PlatformY, Object.Angle)
		Object.PlatformY *= -0x1800
		Object.PlatformY -= 0x300000
		Object.PlatformY += Object.YPos
		Object.PlatformY &= 0xFFFF0000 // Truncate the value
		DrawSpriteXY(0, Object.XPos, Object.PlatformY)
		DrawSpriteXY(1, Object.XPos, Object.PlatformY)
		break
		
	end switch
	
end sub


sub ObjectStartup
	
	LoadSpriteSheet("R5/Objects.gif")
	
	// Different sprites for different time periods
	
	// To avoid redundant labelling, the order of Sprite Frames will just be listed here
	// 0 - Base Platform Frame
	// 1 - Conveyor Frame, to be overlayed atop the base Platform Frame
	
	switch HUD.CurrentTimePeriod
	case TIME_PRESENT
		LoadSpriteSheet("R5/Objects.gif")
		SpriteFrame(-16, -16, 32, 32, 1, 51)
		SpriteFrame(-16, -16, 32, 16, 65, 208)
		break
		
	case TIME_PAST
		LoadSpriteSheet("R5/Objects3.gif")
		SpriteFrame(-16, -16, 32, 32, 1, 170)
		SpriteFrame(-16, -16, 32, 16, 223, 148)
		break
		
	case TIME_GOOD_FUTURE
		LoadSpriteSheet("R5/Objects3.gif")
		SpriteFrame(-16, -16, 32, 32, 1, 170)
		SpriteFrame(-16, -16, 32, 16, 223, 182)
		break
		
	case TIME_BAD_FUTURE
		LoadSpriteSheet("R5/Objects3.gif")
		SpriteFrame(-16, -16, 32, 32, 1, 170)
		SpriteFrame(-16, -16, 32, 16, 223, 216)
		break
		
	end switch
	
end sub


// ========================
// Editor Subs
// ========================

sub RSDKEdit
	if Editor.ReturnVariable == true
		switch Editor.VariableID
		case EDIT_VAR_PROPVAL // Property Value
			CheckResult = Object.PropertyValue
			break
		case 0 // Direction
			CheckResult = Object.PropertyValue
			break
		end switch
	else
		switch Editor.VariableID
		case EDIT_VAR_PROPVAL // Property Value
			Object.PropertyValue = Editor.VariableValue
			break
		case 0 // Direction
			Object.PropertyValue = Editor.VariableValue
			break
		end switch
	end if
end sub


sub RSDKDraw
	TempValue2 = false
	
	// TempValue0 holds just about no use with this sytem, but may as well just grab it
	
	switch Object.PropertyValue
	case 2
		TempValue2 = true
	case 0
	default
		TempValue0 = 0x1800
		TempValue1 = 0x300000
		break
		
	case 5
		TempValue2 = true
	case 3
		TempValue0 = -0x1800
		TempValue1 = -0x300000
		break
		
	end switch

	TempValue3 = Object.YPos
	TempValue3 &= 0xFFFF0000 // Truncate the value
	DrawSpriteXY(0, Object.XPos, TempValue3)
	
	if TempValue2 == true
		DrawSpriteXY(1, Object.XPos, TempValue3)
	end if
	
	if Editor.ShowGizmos == true
		
		Editor.DrawingOverlay = true
		
		// Draw the Platform's path
		
		Sin(TempValue4, 128)
		TempValue4 *= TempValue0
		TempValue4 += TempValue1
		TempValue4 += Object.YPos
		TempValue4 &= 0xFFFF0000 // Truncate the value
		
		DrawLine(Object.XPos, TempValue3, Object.XPos, TempValue4, 255, 255, 255)
		
		Editor.DrawingOverlay = false
		
	end if
end sub


sub RSDKLoad
	LoadSpriteSheet("R5/Objects.gif")
	// Sticking with the Present version here...
	// TODO: other time periods, hopefully there's some better method than 10 checkcurrentfolder checks?
	SpriteFrame(-16, -16, 32, 32, 1, 51)
	SpriteFrame(-16, -16, 32, 16, 65, 208)
	
	AddEditorVariable("Direction")
	SetActiveVariable("Direction")
	AddEnumVariable("Downwards", 0)
	// 1 is unused
	AddEnumVariable("Downwards (Conveyor)", 2)
	AddEnumVariable("Upwards", 3)
	// 4 is unused
	AddEnumVariable("Upwards (Conveyor)", 5)
end sub
