/*
	This script file is part of the Sonic 3 A.I.R. script software distribution.
	Copyright (C) 2017-2024 by Eukaryot

	Published under the GNU GPLv3 open source software license, see license.txt
	or https://www.gnu.org/licenses/gpl-3.0.en.html
*/



//-------------------------------------------------------//
// Level tiles animation                                 //
//-------------------------------------------------------//

//# address-hook(0x027758) end(0x027772)
function void LevelTilesAnimation()
{
	// Targets:
	//   offset			animated tiles		tile animation function
	//  - 0x00:			0x028750			0x02783a				-> AIZ 1 (i.e. the technical act 1 = until everything gets set on fire)
	//  - 0x04:			0x02879c			0x02784a				-> AIZ 2
	//  - 0x08:			0x0287f4			0x027880				-> HCZ 1
	//  - 0x0c:			0x02882c			0x027a58				-> HCZ 2
	//  - 0x10:			0x028862			0x027c2c				-> MGZ 1
	//  - 0x14:			0x028862			0x027c2c				-> MGZ 2
	//  - 0x18:			0x028882			0x027c36				-> CNZ 1
	//  - 0x1c:			0x028882			0x027c36				-> CNZ 2
	//  - 0x20:			0x028906			0x0286e4				-> FBZ 1
	//  - 0x24:			0x028948			0x0286e4				-> FBZ 2
	//  - 0x28:			0x028990			0x027ccc				-> ICZ 1 (probably only the technical act 1)
	//  - 0x2c:			0x028990			0x027ccc				-> ICZ 2
	//  - 0x30:			0x0289a2			0x027e00				-> LBZ 1
	//  - 0x34:			0x0289cc			0x027ef0				-> LBZ 2
	//  - 0x38:			0x0289e8			0x0280ac				-> MHZ 1
	//  - 0x3c:			0x0289e8			0x0280ac				-> MHZ 2
	//  - 0x40:			0x028a6a			0x0281c8				-> SOZ 1
	//  - 0x44:			0x028a6a			0x02825c				-> SOZ 2
	//  - 0x48:			0x028a6a			0x0282be				-> LRZ 1
	//  - 0x4c:			0x028a84			0x0282c8				-> LRZ 2
	//  - 0x50:			0x028aa4			0x0286e4				-> SSZ S/T
	//  - 0x54:			0x028aa4			0x027838				-> SSZ Knuckles		(empty function)
	//  - 0x58:			0x028aee			0x0286e4				-> DEZ 1
	//  - 0x5c:			0x028aee			0x0286e4				-> DEZ 2
	//  - 0x60, 0x64:	0x028bd8			0x027838				-> DDZ				(empty function)
	//  - 0x68, 0x6c:	0x028bd8			0x027838				-> Outro S/T		(empty function)
	//  - 0x70, 0x74:	0x028bd8			0x0286e4				-> ALZ
	//  - 0x78, 0x7c:	0x028be6			0x0286e4				-> BPZ
	//  - 0x80, 0x84:	0x028c1c			0x0283e2				-> DPZ
	//  - 0x88, 0x8c:	0x028c3e			0x027838				-> CGZ				(empty function)
	//  - 0x90, 0x94:	0x028c3e			0x027838				-> EMZ				(empty function)
	//  - 0x98, 0x9c:	0x028c3e			0x0284c8				-> Bonus GM
	//  - 0xa0, 0xa4:	0x028c2c			0x0284fe				-> Bonus GS
	//  - 0xa8, 0xac:	0x028c3e			0x027838				-> Bonus SM			(empty function)
	//  - 0xb0:			0x028c3e			0x0282b4				-> LRZ Boss
	//  - 0xb4:			0x028c40			0x0286e4				-> HPZ
	//  - 0xb8:			0x028c7e			0x027838				-> DEZ Boss			(empty function)
	//  - 0xbc:			0x028c40			0x0286e4				-> Emerald cave

	u8 offset = global.zone * 8 + global.act * 4
	A2 = 0x027778 + s16[0x02777a + offset]
	call tableLookupAddress(0x027778, offset)
}


//# address-hook(0x027838) end(0x027838)
function void LevelTilesAnim.Empty()
{
}


//# address-hook(0x02783a) end(0x027848)
function void LevelTilesAnim.AIZ1()
{
	if (!level.boss_encounter && camera.update_routine != 0)
	{
		LevelTilesAnim.AIZ()
	}
}


//# address-hook(0x02784a) end(0x02787e)
function void LevelTilesAnim.AIZ()
{
#if !STANDALONE
	// This check is absolutely unnecessary, the animation can safely proceed during the boss fight as well
	if (!level.boss_encounter)
#endif
	{
		A3 = 0xfffff7f0
		if (camera.position.x.u16 >= 0x1c0)
		{
			fn0286e8()
		}
		else
		{
			D6 = 0
			A2 += 2
			fn0286ee()

			u32[A3] = 0
			updateSpritePattern(0x2a5880, 0x1940, 0x230)
		}
	}
}


//# address-hook(0x027880) end(0x027888)
function void LevelTilesAnim.HCZ1()
{
	if (u8[0xffffeee8] == 0)
	{
		A3 = 0xfffff7f4
		fn02788c()
	}
}


//# address-hook(0x02788c) end(0x02797a)
function void fn02788c()
{
	D1 = u16[0xffffeee2]
	if (D1.u16 != u16[A3])
	{
		u16[A3] = D1.u16
		if (D1.u16 == 0)
		{
			fn02797e()
			return
		}

		bool negativeD1 = (D1.s16 < 0)
		D1.s16 = 0x60 - abs(D1.s16)
		if (D1.s16 >= 0)
		{
			A4 = 0xffff7c00
			A5 = 0x26d000 + D1.u16 * 96
			u32 baseAddress = negativeD1 ? 0x2a6a60 : 0x2a6d60

			for (u8 i = 0; i < 0x60; ++i)
			{
				A0 = baseAddress + u8[A5] * 4
				u32[A4] = u32[A0]
				u32[A4 + 0x0180] = u32[A0 + 0x0600]
				A4 += 4
				++A5
			}

			if (negativeD1)
			{
				updateSpritePattern(0xffff7c00, 0x5b80, 0x180)

				if (s16[A3 + 0x02] >= 0)
				{
					u16[A3 + 0x02] = -1
					fn0279ac()
				}
			}
			else
			{
				updateSpritePattern(0xffff7c00, 0x5e80, 0x180)

				if (u16[A3 + 0x02] != 0)
				{
					u16[A3 + 0x02] = 0
					fn027984()
				}
			}
		}
	}

	LevelTilesAnim.Default()
}


//# address-hook(0x02797e) end(0x027982)
function void fn02797e()
{
	u16[A3] = 1
	fn0279ac()
	fn027984()
}


//# address-hook(0x027984) end(0x0279a6)
function void fn027984()
{
	updateSpritePattern(0x2a6be0, 0x5b80, 0xc0)
	updateSpritePattern(0x2a71e0, 0x5d00, 0xc0)
}


//# address-hook(0x0279ac) end(0x0279ce)
function void fn0279ac()
{
	updateSpritePattern(0x2a6ee0, 0x5e80, 0xc0)
	updateSpritePattern(0x2a74e0, 0x6000, 0xc0)
}


//# address-hook(0x027a58) end(0x027ab6)
function void LevelTilesAnim.HCZ2()
{
	A3 = 0xfffff7f0
	D1 = u16[0xffffeee4] & 0x1f
	if (D1.u8 != u8[A3 + 0x01])
	{
		u8[A3 + 0x01] = D1.u8
		D2.u16 = D1.u16
		D1.u16 &= 0x07
		D1.u16 <<= 7
		D5 = D1
		D2.u16 &= 0x18
		D0.u16 = D2.u16
		D2.u16 <<= 2
		D1.u16 += D2.u16
		D0.u16 >>= 1

		A4 = 0x027ab8 + D0.u16
		A0 = 0x2a87a0
		D4.u16 = 0x5a40
		D1 += A0
		D2.u16 = D4.u16
		D3.u16 = u16[(A4+=2)-2]
		D4.u16 += D3.u16 * 2
		UpdateSpritePattern()

		D1 = A0 + D5
		D2.u16 = D4.u16
		D3.u16 = u16[(A4+=2)-2]
		if (D3.u16 != 0)
		{
			UpdateSpritePattern()
		}
	}

	A3 += 2
	fn027ac8()
}


//# address-hook(0x027ac8) end(0x027b22)
function void fn027ac8()
{
	D1 = u16[0xffffeee4] & 0x1f
	if (D1.u8 != u8[A3 + 0x01])
	{
		u8[A3 + 0x01] = D1.u8
		D2.u16 = D1.u16
		D1.u16 &= 0x07
		D1.u16 <<= 8
		D5 = D1
		D2.u16 &= 0x18
		D0.u16 = D2.u16
		D2.u16 <<= 3
		D1.u16 += D2.u16
		D0.u16 >>= 1

		A4 = 0x027b24 + D0.u16
		A0 = 0x2a8ba0
		D4.u16 = 0x5ac0
		D1 += A0
		D2.u16 = D4.u16
		D3.u16 = u16[(A4+=2)-2]
		D4.u16 += D3.u16 * 2
		UpdateSpritePattern()

		D1 = A0 + D5
		D2.u16 = D4.u16
		D3.u16 = u16[(A4+=2)-2]
		if (D3.u16 != 0)
		{
			UpdateSpritePattern()
		}
	}

	A3 += 2
	fn027b34()
}


//# address-hook(0x027b34) end(0x027b8e)
function void fn027b34()
{
	D1 = u16[0xffffeee6] & 0x1f
	if (D1.u8 != u8[A3 + 0x01])
	{
		u8[A3 + 0x01] = D1.u8
		D2.u16 = D1.u16
		D1.u16 &= 0x07
		D1.u16 = (D1.u16 >> 7) + (D1.u16 << 9)
		D5 = D1
		D2.u16 &= 0x18
		D0.u16 = D2.u16
		D2.u16 <<= 4
		D1.u16 += D2.u16
		D0.u16 >>= 1

		A4 = 0x027b90 + D0.u16
		A0 = 0x2a93a0
		D4.u16 = 0x5bc0
		D1 += A0
		D2.u16 = D4.u16
		D3.u16 = u16[(A4+=2)-2]
		D4.u16 += D3.u16 * 2
		UpdateSpritePattern()

		D1 = A0 + D5
		D2.u16 = D4.u16
		D3.u16 = u16[(A4+=2)-2]
		if (D3.u16 != 0)
		{
			UpdateSpritePattern()
		}
	}

	A3 += 2
	fn027ba0()
}


//# address-hook(0x027ba0) end(0x027c08)
function void fn027ba0()
{
	D1 = u16[0xffffeee6] & 0x3f
	if (D1.u8 != u8[A3 + 0x01])
	{
		u8[A3 + 0x01] = D1.u8
		D1.s16 = -D1.s16
		D2.u16 = D1.u16
		D1.u16 &= 0x07
		D1.u16 = (D1.u16 >> 7) + (D1.u16 << 9)
		D1.u16 *= 3
		D5 = D1
		D2.u16 ^= 0xffff
		D2.u16 &= 0x38
		D0.u16 = D2.u16
		D1.u16 += D2.u16 * 24
		D0.u16 >>= 1

		A4 = 0x027c0c + D0.u16
		A0 = 0x2aa3a0
		D4.u16 = 0x5dc0
		D1 += A0
		D2.u16 = D4.u16
		D3.u16 = u16[(A4+=2)-2]
		D4.u16 += D3.u16 * 2
		UpdateSpritePattern()

		D1 = A0 + D5
		D2.u16 = D4.u16
		D3.u16 = u16[(A4+=2)-2]
		if (D3.u16 != 0)
		{
			UpdateSpritePattern()
		}
	}

	A3 += 2
	fn0286e8()
}


//# address-hook(0x027c2c) end(0x027c34)
function void LevelTilesAnim.MGZ()
{
	if (level.boss_encounter == 0)
	{
		LevelTilesAnim.Default()
	}
}


//# address-hook(0x027c36) end(0x027c98)
function void LevelTilesAnim.CNZ()
{
	A3 = 0xfffff7f0
	D1 = (u16[0xffffeee2] - camera.background.x.u16) & 0x3f
	if (D1.u8 != u8[A3+1])
	{
		u8[A3+1] = D1.u8
		D2.u16 = D1.u16
		D1.u16 &= 0x07
		D1.u16 = (D1.u16 >> 6) + (D1.u16 << 10)
		D5 = D1
		D2.u16 &= 0x38
		D0.u16 = D2.u16
		D2.u16 <<= 4
		D1.u16 += D2.u16
		D0.u16 >>= 1

		A4 = 0x027c9c + D0.u16
		A0 = 0x2b5b80
		D4.u16 = 0x6100
		D1 += A0
		D2.u16 = D4.u16
		D3.u16 = u16[(A4+=2)-2]
		D4.u16 += D3.u16 * 2
		UpdateSpritePattern()

		D1 = A0 + D5
		D2.u16 = D4.u16
		D3.u16 = u16[(A4+=2)-2]
		if (D3.u16 != 0)
		{
			UpdateSpritePattern()
		}
	}

	A3 += 2
	fn0286e8()
}


//# address-hook(0x027ccc) end(0x027dfa)
function void LevelTilesAnim.ICZ()
{
	A3 = 0xfffff7f0
	D0 = (u16[0xffffeee2] - camera.background.x.u16) & 0x1f
	if (D0.u8 != u8[A3 + 1])
	{
		u8[A3 + 1] = D0.u8
		D2.u16 = D0.u16
		D1 = (D0 & 0x07) << 9
		D5 = D1
		D2.u16 &= 0x18
		D0.u16 = D2.u16
		D2.u16 <<= 4
		D1.u16 += D2.u16
		D0.u16 >>= 1

		A4 = 0x027cbc + D0.u16
		A0 = 0x2b8580
		D4.u16 = 0x21c0
		D1 += A0
		D2.u16 = D4.u16
		D3.u16 = u16[(A4+=2)-2]
		D4.u16 += D3.u16 * 2
		UpdateSpritePattern()

		D1 = A0 + D5
		D2.u16 = D4.u16
		D3.u16 = u16[(A4+=2)-2]
		if (D3.u16 != 0)
		{
			D4.u16 += D3.u16 * 2
			UpdateSpritePattern()
		}
	}

	A3 += 2
	if (global.act == 0)
	{
		D1 = 0
		D1.u16 = (u16[0xffffeee4] - camera.background.y.u16) & 0x3f
		if (D1.u8 != u8[A3 + 1])
		{
			u8[A3 + 1] = D1.u8
			D1.u16 *= 4
			D1 += 0x2b9580
			D2.u16 = 0x2440
			D3.u16 = 0x80
			UpdateSpritePattern()

			D1 = camera.background.y.u16
			D0.s16 = s16[0xffffeee4] >> 1
			D1.u16 -= D0.u16
			D0.s16 >>= 1
			D1.u16 = (D0.u16 - D1.u16) & 0x1f
			D1.u16 *= 4
			D1 += 0x2b9780
			D2.u16 = 0x2540
			D3.u16 = 0x40
			UpdateSpritePattern()

			D1 = camera.background.y.u16
			D0.s16 = s16[0xffffeee4] >> 1
			D1.u16 = (D0.u16 - D1.u16) & 0x0f
			D1.u16 *= 4
			D1 += 0x2b9880
			D2.u16 = 0x25c0
			D3.u16 = 0x20
			UpdateSpritePattern()

			D1 = camera.background.y.u16
			D0.s16 = s16[0xffffeee4] >> 2
			D1.u16 = (D0.u16 - D1.u16) & 0x07
			D1.u16 *= 4
			D1 += 0x2b9900
			D2.u16 = 0x2600
			D3.u16 = 0x10
			UpdateSpritePattern()
		}
	}
	A3 += 2
	fn0286e8()
}


//# address-hook(0x027e00) end(0x027edc)
function void LevelTilesAnim.LBZ1()
{
	A3 = 0xfffff7f0
	--u8[A3]
	if (u8[A3] == 0xff)
	{
		u8[A3] = 3
		D0 = u8[A3 + 1]
		++u8[A3 + 1]
		u8[A3 + 1] &= 0x0f
		D0.u16 = (D0.u16 >> 7) + (D0.u16 << 9)
		D1 = 0x2bc340 + D0
		D2.u16 = 0x2c00
		D3.u16 = 0x0100
		UpdateSpritePattern()
	}

	A3 += 2
	D0 = (u16[0xffffeee2] - camera.background.x.u16) & 0x1f
	if (D0.u8 != u8[A3+1])
	{
		u8[A3+1] = D0.u8
		D1 = 0
		D2.u16 = D0.u16
		D0.u16 &= 0x07
		D6 = D0
		D0.u16 <<= 7
		D1.u16 = D0.u16
		D0.u16 <<= 2
		D1.u16 += D0.u16
		D5 = D1
		D2.u16 &= 0x18
		D0.u16 = D2.u16
		D2.u16 <<= 2
		D1.u16 += D2.u16
		D2.u16 <<= 2
		D1.u16 += D2.u16
		D0.u16 >>= 1

		A4 = 0x027ee0 + D0.u16
		A0 = 0x2ba240
		D4.u16 = 0x6a00
		D1 += A0
		D2.u16 = D4.u16
		D3.u16 = u16[(A4+=2)-2]
		D4.u16 += D3.u16 * 2
		UpdateSpritePattern()

		D1 = A0 + D5
		D2.u16 = D4.u16
		D3.u16 = u16[(A4+=2)-2]
		if (D3.u16 != 0)
		{
			D4.u16 += D3.u16 * 2
			UpdateSpritePattern()
		}

		D1 = D6
		D1.u16 <<= 5
		A0 = 0x2bb640
		D1 += A0
		D2.u16 = D4.u16
		D3.u16 = 0x10
		UpdateSpritePattern()
	}

	A3 += 2
	if (u16[(A3+=2)-2] == 0)
	{
		if (u8[A3+1] != 1)
		{
			u16[A3] = 0
			fn0286e8()
		}
	}
	else
	{
		fn0286e8()
	}

	A3 = 0xfffff7fc
	A2 = 0x0289b0
	fn0286e8()
}


//# address-hook(0x027ef0) end(0x027f64)
function void LevelTilesAnim.LBZ2()
{
	A3 = 0xfffff7f0
	if (u8[A3+0x0f] == 0)
	{
		--u8[A3]
		if (u8[A3] == 0xff)
		{
			u8[A3] = 3
			D0 = u8[A3+1]
			++u8[A3+1]
			u8[A3+1] &= 0x0f

			D0.u16 = (D0.u16 >> 7) + (D0.u16 << 9)
			D1 = 0x2bc340 + D0
			D2.u16 = 0x2c00
			D3.u16 = 0x0100
			UpdateSpritePattern()
		}

		A3 += 2
		D1 = (u16[0xffffeee4] - camera.background.x.u16) & 0x0f
		if (D1.u8 != u8[A3+1])
		{
			u8[A3+1] = D1.u8
			D1.u16 <<= 6
			D1 += 0x2bb740
			D2.u16 = 0x5c60
			D3.u16 = 0x20
			UpdateSpritePattern()
		}

		A3 += 2
		fn027f66()

		A3 += 4
		fn0286e8()
		return
	}

	A3 += 4
	fn027f66()
}


//# address-hook(0x027f66) end(0x028048)
function void fn027f66()
{
	D1 = u16[0xffffeee2]
	if (D1.u16 != u16[A3])
	{
		u16[A3] = D1.u16
		if (D1.u16 == 0)
		{
			fn02804a()
			return
		}

		if (D1.s16 < 0)
		{
			D1.u16 += 0x40
			if (D1.s16 < 0)
				return

			D1.u16 <<= 6
			A4 = 0xffff7e00
			A5 = 0x26f460 + D1.s16
			for (u8 i = 0; i < 0x40; ++i)
			{
				D0 = u16(u8[(A5+=1)-1]) * 4
				A0 = 0x2bbb40 + D0.u16
				u32[A4] = u32[A0]
				u32[A4 + 0x100] = u32[A0 + 0x100]
				A4 += 4
			}

			updateSpritePattern(0xffff7e00, 0x5860, 0x0100)

			if (u16[A3+2] != 0)
			{
				u16[A3+2] = 0
				fn028066()
			}
		}
		else
		{
			D1.u16 = 0x40 - D1.s16
			if (D1.s16 < 0)
				return

			D1.u16 <<= 6
			A4 = 0xffff7e00
			A5 = 0x26f460 + D1.s16
			for (u8 i = 0; i < 0x40; ++i)
			{
				D0 = u16(u8[(A5+=1)-1]) * 4
				A0 = 0x2bbf40 + D0.u16
				u32[A4] = u32[A0]
				u32[A4 + 0x100] = u32[A0 + 0x100]
				A4 += 4
			}

			updateSpritePattern(0xffff7e00, 0x5a60, 0x0100)

			if (s16[A3+2] >= 0)
			{
				u16[A3+2] = 0xffff
				fn028052()
			}
		}
	}
}


//# address-hook(0x02804a) end(0x028050)
function void fn02804a()
{
	u16[A3+2] = 1
	fn028066()
	fn028052()
}


//# address-hook(0x028052) end(0x028060)
function void fn028052()
{
	updateSpritePattern(0x2bbd40, 0x5860, 0x0100)
}


//# address-hook(0x028066) end(0x028074)
function void fn028066()
{
	updateSpritePattern(0x2bc140, 0x5a60, 0x0100)
}


//# address-hook(0x0280ac) end(0x028112)
function void LevelTilesAnim.MHZ()
{
	A3 = 0xfffff7f0
	D0 = (u16[0xffffeee4] - camera.background.x.u16) & 0x1f
	if (D0.u8 != u8[A3 + 1])
	{
		u8[A3 + 1] = D0.u8
		D1 = (D0.u16 & 0x07) << 8
		D5 = D1
		D0.u16 = D0.u16 & 0x18
		D1.u16 += D0.u16 * 8
		D0.u16 >>= 1

		A4 = 0x028114 + D0.u16
		A0 = 0x0ba1c0
		D4.u16 = 0x3700
		D1 += A0
		D2.u16 = D4.u16
		D3.u16 = u16[(A4+=2)-2]
		D4.u16 += D3.u16 * 2
		UpdateSpritePattern()

		D1 = A0 + D5
		D2.u16 = D4.u16
		D3.u16 = u16[(A4+=2)-2]
		if (D3.u16 != 0)
		{
			UpdateSpritePattern()
		}
	}
	A3 += 2
	fn028124()
}


//# address-hook(0x028124) end(0x028194)
function void fn028124()
{
	D1 = (u16[0xffffeee2] - camera.background.x.u16) & 0x3f
	if (D1.u8 != u8[A3 + 1])
	{
		u8[A3 + 1] = D1.u8
		D2.u16 = D1.u16
		D1.u16 = (D1.u16 & 0x07) << 10
		D5 = D1
		D2.u16 &= 0x38
		D0.u16 = D2.u16
		D1.u16 += D2.u16 << 4
		D0.u16 >>= 1

		A4 = 0x028198 + D0.u16
		A0 = 0x0ba9c0
		D4.u16 = 0x3aa0
		D1 += A0
		D2.u16 = D4.u16
		D3.u16 = u16[(A4+=2)-2]
		D4.u16 += D3.u16 * 2
		UpdateSpritePattern()

		D1 = A0 + D5
		D2.u16 = D4.u16
		D3.u16 = u16[(A4+=2)-2]
		if (D3.u16 != 0)
		{
			UpdateSpritePattern()
		}
	}

	A3 += 2
	D0.u8 = u8[0xfffff7ff] + 2
	if (D0.u8 >= 0x58)
		D0 = 0

	u8[0xfffff7ff] = D0.u8
	fn0286e8()
}


//# address-hook(0x0281c8) end(0x02825a)
function void LevelTilesAnim.SOZ1()
{
	A3 = 0xfffff7f0
	D0 = (u16[0xffffeee2] - camera.background.x.u16) & 0x1f
	if (D0.u8 != u8[A3 + 0x01])
	{
		u8[A3 + 0x01] = D0.u8
		D2.u16 = D0.u16
		D0.u16 = (D0.u16 & 0x07) * 0x180
		D1 = D0.u16
		D5 = D1
		D2.u16 &= 0x18
		D0.u16 = D2.u16 >> 1
		D1.u16 += D2.u16 * 12

		A4 = 0x0281b8 + D0.u16
		D4.u16 = 0x6600
		D1 += 0x0bd9c0
		D2.u16 = D4.u16
		D3.u16 = u16[(A4+=2)-2]
		D4.u16 += D3.u16 * 2
		UpdateSpritePattern()

		D1 = 0x0bd9c0 + D5
		D2.u16 = D4.u16
		D3.u16 = u16[(A4+=2)-2]
		if (D3.u16 != 0)
		{
			UpdateSpritePattern()
		}

		D1 = 0x0be5c0 + u8[A3 + 0x01] * 0xc0
		D2.u16 = 0x6780
		D3.u16 = 0x60
		UpdateSpritePattern()
	}
}


//# address-hook(0x02825c) end(0x0282b2)
function void LevelTilesAnim.SOZ2()
{
	A3 = 0xfffff7f0
	--u8[A3]
	if (s8[A3] < 0)
	{
		u8[A3] = 7

		D0 = u8[A3 + 0x01]
		if (D0.u8 >= 2)
			u8[A3 + 0x01] = 0
		else
			++u8[A3 + 0x01]

		D1.u16 = level.palettefx.frame_4 & 0x06
		D2.u16 = D1.u16 >> 1
		D1.u16 += D2.u16
		if (D1.u16 != 0x06)
		{
			D1.u16 += D0.u16
		}
		D1.u16 <<= 6
		D0.u16 = D1.u16
		D1.u16 *= 3
		A0 = 0x0bfdc0
		D1 += A0
		D2.u16 = 0x6600
		D3.u16 = 0x60
		UpdateSpritePattern()
	}
}


//# address-hook(0x0282b4) end(0x0282bc)
function void LevelTilesAnim.LRZ_Boss()
{
	D4.u16 = 0x2e00
	D6.u16 = 0x3280
	LevelTilesAnim.LRZ_shared()
}


//# address-hook(0x0282be) end(0x0282c6)
function void LevelTilesAnim.LRZ1()
{
	D4.u16 = 0x6400
	D6.u16 = 0x6880
	LevelTilesAnim.LRZ_shared()
}


//# address-hook(0x0282c8) end(0x0282cc)
function void LevelTilesAnim.LRZ2()
{
	D4.u16 = 0x6400
	D6.u16 = 0x6880
	LevelTilesAnim.LRZ_shared()
}


//# address-hook(0x0282d0) end(0x02834a)
function void LevelTilesAnim.LRZ_shared()
{
	A3 = 0xfffff7f0
	D0 = 0
	D0.u16 = u16[0xffffeee4] - camera.background.x.u16 - 1
	D0.u16 = ((D0 / 0x30) << 16) + (D0 % 0x30)
	if (D0.u8 != u8[A3 + 0x01])
	{
		u8[A3 + 0x01] = D0.u8
		D2.u16 = D0.u16
		D0.u16 = (D0.u16 & 0x07) << 7
		D1 = D0.u16
		D1.u16 += D0.u16 << 3
		D5 = D1
		D2.u16 &= 0x38
		D0.u16 = D2.u16
		D2.u16 <<= 3
		D1.u16 += D2.u16 * 3
		D0.u16 >>= 1

		A4 = 0x02834c + D0.u16
		A0 = 0x0c0300
		D1 += A0
		D2.u16 = D4.u16
		D3.u16 = u16[(A4+=2)-2]
		D4.u16 += D3.u16 * 2
		UpdateSpritePattern()

		D1 = A0 + D5
		D2.u16 = D4.u16
		D3.u16 = u16[(A4+=2)-2]
		if (D3.u16 != 0)
		{
			UpdateSpritePattern()
		}
	}

	if (global.zone != 0x16)	// Lava Reef Boss
	{
		A3 += 2
		fn028364()
	}
}


//# address-hook(0x028364) end(0x0283ce)
function void fn028364()
{
	D0 = (u16[0xffffeee2] - camera.background.x.u16) & 0x1f
	if (D0.u8 != u8[A3 + 0x01])
	{
		u8[A3 + 0x01] = D0.u8
		D2.u16 = D0.u16 & 0x18
		D1 = (D0.u16 & 0x07) * 384
		D5 = D1
		D0.u16 = D2.u16
		D1.u16 += D2.u16 * 12
		D0.u16 >>= 1

		A4 = 0x0283d2 + D0.u16
		A0 = 0x0c2700
		D4.u16 = D6.u16
		D1 += A0
		D2.u16 = D4.u16
		D3.u16 = u16[(A4+=2)-2]
		D4.u16 += D3.u16 * 2
		UpdateSpritePattern()

		D1 = A0 + D5
		D2.u16 = D4.u16
		D3.u16 = u16[(A4+=2)-2]
		if (D3.u16 != 0)
		{
			UpdateSpritePattern()
		}
	}

	A3 += 2
	fn0286e8()
}



//# address-hook(0x0283e2) end(0x028444)
function void LevelTilesAnim.Competiton_DPZ()
{
	A3 = 0xfffff7f0
	D1 = (u16[0xffffeee2] - camera.background.x.u16) & 0x3f
	if (D1.u8 != u8[A3 + 0x01])
	{
		u8[A3 + 0x01] = D1.u8
		D2.u16 = D1.u16
		D1.u16 &= 0x07
		D1.u16 <<= 10
		D5 = D1
		D2.u16 &= 0x38
		D0.u16 = D2.u16
		D2.u16 <<= 4
		D1.u16 += D2.u16
		D0.u16 >>= 1

		A4 = 0x028446 + D0.u16
		A0 = 0x2c0180
		D4.u16 = 0x2a60
		D1 += A0
		D2.u16 = D4.u16
		D3.u16 = u16[(A4+=2)-2]
		D4.u16 += D3.u16 * 2
		UpdateSpritePattern()

		D1 = D5 + A0
		D2.u16 = D4.u16
		D3.u16 = u16[(A4+=2)-2]
		if (D3.u16 != 0)
		{
			UpdateSpritePattern()
		}
	}

	A3 += 2
	fn028466()
}


//# address-hook(0x028466) end(0x0284c4)
function void fn028466()
{
	D1 = (u16[0xffffeee4] - camera.background.x.u16.player2) & 0x3f
	if (D1.u8 != u8[A3 + 0x01])
	{
		u8[A3 + 0x01] = D1.u8
		D2.u16 = D1.u16
		D1.u16 &= 0x07
		D1.u16 <<= 10
		D5 = D1
		D2.u16 &= 0x38
		D0.u16 = D2.u16
		D2.u16 <<= 4
		D1.u16 += D2.u16
		D0.u16 >>= 1

		A4 = 0x028446 + D0.u16
		A0 = 0x2c0180
		D4.u16 = 0x2e60
		D1 += A0
		D2.u16 = D4.u16
		D3.u16 = u16[(A4+=2)-2]
		D4.u16 += D3.u16 * 2
		UpdateSpritePattern()

		D1 = D5 + A0
		D2.u16 = D4.u16
		D3.u16 = u16[(A4+=2)-2]
		if (D3.u16 != 0)
		{
			UpdateSpritePattern()
		}
	}

	A3 += 2
	fn0286e8()
}



//# address-hook(0x0286e4) end(0x0286e4)
function void LevelTilesAnim.Default()
{
	A3 = 0xfffff7f0
	fn0286e8()
}


//# address-hook(0x0286e8) end(0x0286ec)
function void fn0286e8()
{
	D6.u16 = u16[A2]
	A2 += 2
	fn0286ee()
}


//# address-hook(0x0286ee) end(0x02874e)
function void fn0286ee()
{
	while (D6.s16 >= 0)
	{
		--u8[A3]
		if (u8[A3] == 0xff)
		{
			D0 = u8[A3 + 1]
			if (D0.u8 >= u8[A2 + 6])
			{
				D0 = 0
				u8[A3 + 1] = D0.u8
			}
			++u8[A3 + 1]
			u8[A3] = u8[A2]
			if (s8[A3] < 0)
			{
				D0.u16 *= 2
				u8[A3] = u8[A2 + D0.u16 + 9]
			}
			D0.u8 = u8[A2 + D0.u16 + 8]
			D0.u16 <<= 5
			D2.u16 = u16[A2 + 4]
			D1 = D0 + (u32[A2] & 0x00ffffff)
			D3 = u8[A2 + 7]
			D3.u16 <<= 4
			UpdateSpritePattern()
		}

		D0.u8 = u8[A2 + 6]
		if (s8[A2] < 0)
			D0.u8 *= 2
		++D0.u8
		D0.u16 &= 0xfe
		A2 += D0.s16 + 8
		A3 += 2
		--D6.s16
	}
}
