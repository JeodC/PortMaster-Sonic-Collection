// ----------------------------------
// RSDK Project: Sonic 2
// Script Description: Monitor Object
// Script Author: Christian Whitehead/Simon Thomley
// Unpacked by Rubberduckycooly's script unpacker
// ----------------------------------

// ========================
// Aliases
// ========================

private alias object.value0  : object.contentsPos.y
private alias object.value1  : object.timer
private alias object.value3  : object.rewardPlayer
private alias object.value31 : object.altContents

// Monitor type aliases
private alias 0  : MONITOR_BLANK
private alias 1  : MONITOR_RINGS
private alias 2  : MONITOR_SHIELD_BLUE
private alias 3  : MONITOR_INVINCIBILITY
private alias 4  : MONITOR_SPEEDSHOES
private alias 5  : MONITOR_1UP_SONIC
private alias 6  : MONITOR_1UP_TAILS
private alias 7  : MONITOR_1UP_KNUX
private alias 8  : MONITOR_SUPER
private alias 9  : MONITOR_SHIELD_BUBBLE
private alias 10 : MONITOR_SHIELD_FIRE
private alias 11 : MONITOR_SHIELD_LIGHTNING
private alias 12 : MONITOR_EGGMAN
private alias 13 : MONITOR_TELEPORT
private alias 14 : MONITOR_RANDOM
private alias 15 : MONITOR_DEBUG_SHIELD
private alias 16 : MONITOR_DEBUG_EMERALDS
private alias 17 : MONITOR_1UP_AMY // Origins exclusive

private alias 16 : MONITOR_COUNT

// Monitor states
private alias 0 : MONITOR_STATE_IDLE
private alias 1 : MONITOR_STATE_FALL

// Broken monitor states
private alias 0 : MONITOR_STATE_RISE

// Player Aliases
private alias object.state : player.state
private alias object.controlMode : player.controlMode
private alias object.propertyValue : player.character
private alias object.yvel : player.yvel
private alias object.gravity : player.gravity
private alias object.animation : player.animation
private alias object.value16 : player.isSidekick
private alias object.value17 : debugMode.currentSelection
private alias object.value25 : player.gravityStrength
private alias object.value40 : player.hitboxLeft
private alias object.value38 : player.hitboxTop
private alias object.value41 : player.hitboxRight
private alias object.value39 : player.hitboxBottom

// Game Modes
private alias 2 : MODE_TIMEATTACK

// Shield Types Aliases
private alias 0 : SHIELDTYPE_S2
private alias 1 : SHIELDTYPE_S3
private alias 2 : SHIELDTYPE_RAND_S2
private alias 3 : SHIELDTYPE_RAND_S3

// Item Mode Aliases
private alias 0 : ITEMMODE_NOPREFERENCE
private alias 1 : ITEMMODE_RANDOM
private alias 2 : ITEMMODE_TELEPORTONLY
private alias 3 : ITEMMODE_FIXED

// Path ID Aliases
private alias 0 : PATH_A


// ========================
// Function Declarations
// ========================

reserve function Monitor_DebugDraw
reserve function Monitor_DebugSpawn


// ========================
// Static Values
// ========================

private value Monitor_startDebugID = 0


// ========================
// Tables
// ========================

// This variant uses S2 shields only
private table Monitor_randTypesTable_S2
	1  // MONITOR_RINGS
	2  // MONITOR_SHIELD_BLUE
	3  // MONITOR_INVINCIBILITY
	4  // MONITOR_SPEEDSHOES
	5  // MONITOR_1UP_SONIC
	12  // MONITOR_EGGMAN
	13 // MONITOR_TELEPORT
	1  // MONITOR_RINGS
	2  // MONITOR_SHIELD_BLUE
	1  // MONITOR_RINGS
end table

// This table uses S3 shields as well!
private table Monitor_randTypesTable_S3
	1  // MONITOR_RINGS
	2  // MONITOR_SHIELD_BLUE
	3  // MONITOR_INVINCIBILITY
	4  // MONITOR_SPEEDSHOES
	5  // MONITOR_1UP_SONIC
	9  // MONITOR_SHIELD_BUBBLE
	10 // MONITOR_SHIELD_FIRE
	11 // MONITOR_SHIELD_LIGHTNING
	12 // MONITOR_EGGMAN
	13 // MONITOR_TELEPORT
end table


// ========================
// Function Definitions
// ========================

private function Monitor_DebugDraw
	DrawSprite(0)
	
	temp0 = debugMode[0].currentSelection
	temp0 -= Monitor_startDebugID
	if temp0 == MONITOR_1UP_SONIC
#platform: USE_STANDALONE
		temp0 += stage.playerListPos
#endplatform
#platform: USE_ORIGINS
		// Since Amy's monitor ID isn't with the other characters, just force her icon to show up if we're playing as her
		// (Not sure why they bothered since you can't spawn life monitors in Origins but whatever)
		if stage.playerListPos != PLAYER_AMY
			temp0 += stage.playerListPos
		else
			temp0 = 19
		end if
#endplatform
	else
		if temp0 > MONITOR_1UP_SONIC
			temp0 += 2
		end if
	end if

	temp0 += 2
	DrawSprite(temp0)
end function


private function Monitor_DebugSpawn
	temp0 = debugMode[0].currentSelection
	temp0 -= Monitor_startDebugID
	if temp0 == MONITOR_1UP_SONIC
#platform: USE_STANDALONE
		temp0 += stage.playerListPos
#endplatform
#platform: USE_ORIGINS
		// Since Amy's monitor ID isn't with the other characters, just force her icon to show up if we're playing as her
		// (Not sure why they bothered since you can't spawn life monitors in Origins but whatever)
		if stage.playerListPos != PLAYER_AMY
			temp0 += stage.playerListPos
		else
			temp0 = 19
		end if
#endplatform
	else
		if temp0 > MONITOR_1UP_SONIC
			temp0 += 2
		end if
	end if

	CreateTempObject(TypeName[Monitor], temp0, object.xpos, object.ypos)
	object[tempObjectPos].frame = object[tempObjectPos].propertyValue
	object[tempObjectPos].frame += 2
end function


// ========================
// Events
// ========================

event ObjectUpdate
	if object.state == MONITOR_STATE_FALL
		object.yvel += 0x3800
		object.ypos += object.yvel
		if object.yvel >= 0
			ObjectTileCollision(CSIDE_FLOOR, 0, 16, PATH_A)
			if checkResult == true
				object.yvel = 0
				object.state = MONITOR_STATE_IDLE
			end if
		end if
	end if

	foreach (GROUP_PLAYERS, currentPlayer, ACTIVE_ENTITIES)
		CheckGreater(player[currentPlayer].yvel, -1)
		temp0 = checkResult
		CheckEqual(player[currentPlayer].gravity, GRAVITY_GROUND)
		temp0 |= checkResult
		if temp0 == true
			CheckEqual(player[currentPlayer].animation, ANI_JUMPING)
			temp0 = checkResult
			CheckEqual(player[currentPlayer].animation, ANI_GLIDING)
			temp0 |= checkResult
			CheckEqual(player[currentPlayer].animation, ANI_GLIDING_STOP)
			temp0 |= checkResult
#platform: USE_ORIGINS
			CheckEqual(player[currentPlayer].animation, ANI_HAMMER_JUMP)
			temp0 |= checkResult
			CheckEqual(player[currentPlayer].animation, ANI_HAMMER_DASH)
			temp0 |= checkResult
#endplatform
			if temp0 == true
				if player[currentPlayer].isSidekick == false
					BoxCollisionTest(C_TOUCH, object.entityPos, -16, -14, 16, 16, currentPlayer, player[currentPlayer].hitboxLeft, player[currentPlayer].hitboxTop, player[currentPlayer].hitboxRight, player[currentPlayer].hitboxBottom)
					if checkResult == true
						object.state = MONITOR_STATE_RISE
						CreateTempObject(TypeName[Smoke Puff], 0, object.xpos, object.ypos)
						object[tempObjectPos].drawOrder = 4
						player[currentPlayer].yvel += player[currentPlayer].gravityStrength
						player[currentPlayer].yvel += player[currentPlayer].gravityStrength
						FlipSign(player[currentPlayer].yvel)

						object.type = TypeName[Broken Monitor]
						object.rewardPlayer = currentPlayer
						if object.priority != PRIORITY_XBOUNDS_DESTROY
							object.priority = PRIORITY_ACTIVE
						end if

						object.alpha = 0xFF
						object.contentsPos.y = object.ypos
						object.timer = -0x30000
						if object.propertyValue == MONITOR_RANDOM
							vs.randomValue *= 1103515245
							vs.randomValue += 12345
							vs.randomValue &= 0x7FFFFFFF
							temp0 = vs.randomValue
							temp0 >>= 16
							temp0 %= 10

							if options.vsMode == true
								if player[currentPlayer].character == PLAYER_SONIC_A // only let Sonic have access to the elemental shields, they're useless to all other chars anyway
									GetTableValue(object.propertyValue, temp0, Monitor_randTypesTable_S3)
								else
									GetTableValue(object.propertyValue, temp0, Monitor_randTypesTable_S2)
								end if

								if object.propertyValue == MONITOR_TELEPORT
									// If we have a Teleport monitor but either of the characters aren't ready to be teleported at the moment, then
									// just transform the monitor into a more generic reward instead
									
									if player[0].controlMode == CONTROLMODE_NONE
										object.propertyValue = MONITOR_SHIELD_BLUE
									end if

									if player[1].controlMode == CONTROLMODE_NONE
										object.propertyValue = MONITOR_SHIELD_BLUE
									end if

									if player[0].state == Player_State_Static
										object.propertyValue = MONITOR_RINGS
									end if

									if player[1].state == Player_State_Static
										object.propertyValue = MONITOR_RINGS
									end if
								end if
							else
								if options.shieldType == SHIELDTYPE_RAND_S3
									GetTableValue(object.propertyValue, temp0, Monitor_randTypesTable_S3)
								else
									GetTableValue(object.propertyValue, temp0, Monitor_randTypesTable_S2)
								end if

								if object.propertyValue == MONITOR_TELEPORT
									object.propertyValue = MONITOR_RINGS
								end if
							end if
						end if

						if options.vsMode == true
							if vs.playerID == 0
								if currentPlayer == 0
									vs.items1P++
								else
									vs.items2P++
								end if
							else
								if currentPlayer == 1
									vs.items1P++
								else
									vs.items2P++
								end if
							end if
						end if

						PlaySfx(SfxName[Destroy], false)
					end if
				else
					BoxCollisionTest(C_SOLID, object.entityPos, -15, -14, 15, 16, currentPlayer, C_BOX, C_BOX, C_BOX, C_BOX)
				end if
			else
				BoxCollisionTest(C_SOLID, object.entityPos, -15, -14, 15, 16, currentPlayer, C_BOX, C_BOX, C_BOX, C_BOX)
			end if
		else
			BoxCollisionTest(C_SOLID, object.entityPos, -15, -16, 15, 16, currentPlayer, C_BOX, C_BOX, C_BOX, C_BOX)
			if checkResult == COL_BOTTOM
				object.state = MONITOR_STATE_FALL
				object.yvel = -0x20000
				player[currentPlayer].yvel = 0x20000
			end if
		end if
	next
end event


event ObjectDraw
	DrawSprite(0)
	
	switch StageSetup_monitorOverlayFrame
	case 0
	case 1
		break

	case 6
	case 7
		DrawSprite(1)
		break

	case 12
	case 13
		DrawSprite(2)
		break

	default
		DrawSprite(object.frame)
		break
	end switch
end event


event ObjectStartup
	LoadSpriteSheet("Global/Items.gif")
	SpriteFrame(-16, -16, 32, 32, 18, 1) // 0 - Base monitor sprite
	SpriteFrame(-8, -9, 16, 14, 18, 51) // 1 - Static 1
	SpriteFrame(-8, -9, 16, 14, 35, 51) // 2 - Static 2
	SpriteFrame(-8, -9, 16, 14, 18, 66) // 3 - MONITOR_RINGS
	SpriteFrame(-8, -9, 16, 14, 35, 66) // 4 - MONITOR_SHIELD_BLUE
	SpriteFrame(-8, -9, 16, 14, 18, 81) // 5 - MONITOR_INVINCIBILITY
	SpriteFrame(-8, -9, 16, 14, 35, 81) // 6 - MONITOR_SPEEDSHOES
	
	// Amy's monitor icon is at the end of the list
#platform: USE_ORIGINS
	if game.coinMode == false
#endplatform
		SpriteFrame(-8, -9, 16, 14, 18, 96)  // 7 - MONITOR_1UP_SONIC
		SpriteFrame(-8, -9, 16, 14, 35, 96)  // 8 - MONITOR_1UP_TAILS
		SpriteFrame(-8, -9, 16, 14, 18, 111) // 9 - MONITOR_1UP_KNUX
#platform: USE_ORIGINS
	else
		SpriteFrame(-8, -9, 16, 14, 35, 186) // 7 - MONITOR_1UP_SONIC (Coin)
		SpriteFrame(-8, -9, 16, 14, 35, 186) // 8 - MONITOR_1UP_TAILS (Coin but again)
		SpriteFrame(-8, -9, 16, 14, 35, 186) // 9 - MONITOR_1UP_KNUX  (Coin but yet again)
	end if
#endplatform
	
	SpriteFrame(-8, -9, 16, 14, 35, 111) // 10 - MONITOR_SUPER
	SpriteFrame(-8, -9, 16, 14, 18, 141) // 11 - MONITOR_SHIELD_BUBBLE
	SpriteFrame(-8, -9, 16, 14, 35, 126) // 12 - MONITOR_SHIELD_FIRE
	SpriteFrame(-8, -9, 16, 14, 18, 126) // 13 - MONITOR_SHIELD_LIGHTNING
	SpriteFrame(-8, -9, 16, 14, 35, 141) // 14 - MONITOR_EGGMAN
	SpriteFrame(-8, -9, 16, 14, 18, 156) // 15 - MONITOR_TELEPORT
	SpriteFrame(-8, -9, 16, 14, 35, 156) // 16 - MONITOR_RANDOM
	SpriteFrame(-8, -9, 16, 14, 18, 171) // 17 - MONITOR_DEBUG_SHIELD
	SpriteFrame(-8, -9, 16, 14, 35, 171) // 18 - MONITOR_DEBUG_EMERALDS
#platform: USE_ORIGINS
	if game.coinMode == false
		SpriteFrame(-8, -9, 16, 14, 18, 201) // 19 - MONITOR_1UP_AMY
	else
		SpriteFrame(-8, -9, 16, 14, 35, 186) // 19 - MONITOR_1UP_AMY (The long awaited return of Coin)
	end if
#endplatform
	
	// (The Mania monitor in the Origins version's spritesheet is unused btw)
	
	Monitor_startDebugID = DebugMode_ObjCount
	Monitor_startDebugID--
	temp0 = MONITOR_BLANK
	while temp0 < MONITOR_COUNT
		temp2 = true
		// Amy's monitor type isn't added here, instead the debug mode functions force it in when playing as her
		if temp0 >= MONITOR_1UP_SONIC
			if temp0 <= MONITOR_1UP_KNUX
				temp1 = temp0
				temp1 -= MONITOR_1UP_SONIC
				if stage.playerListPos != temp1
					temp2 = false
				end if
			end if
		end if

		if temp2 == true
			SetTableValue(TypeName[Monitor], DebugMode_ObjCount, DebugMode_TypesTable)
			SetTableValue(Monitor_DebugDraw, DebugMode_ObjCount, DebugMode_DrawTable)
			SetTableValue(Monitor_DebugSpawn, DebugMode_ObjCount, DebugMode_SpawnTable)
			DebugMode_ObjCount++
		end if
		temp0++
	loop
	
	foreach (TypeName[Monitor], arrayPos0, ALL_ENTITIES)
		object[arrayPos0].altContents = object[arrayPos0].propertyValue
		object[arrayPos0].altContents >>= 4
		object[arrayPos0].propertyValue &= 15
	next

	// Turn all 1UP monitors into the icons of the appropriate character
	if stage.playerListPos == PLAYER_TAILS_A
		foreach (TypeName[Monitor], arrayPos0, ALL_ENTITIES)
			if object[arrayPos0].propertyValue == MONITOR_1UP_SONIC
				object[arrayPos0].propertyValue = MONITOR_1UP_TAILS
			end if
		next
	end if
	
	if stage.playerListPos == PLAYER_KNUCKLES_A
		foreach (TypeName[Monitor], arrayPos0, ALL_ENTITIES)
			if object[arrayPos0].propertyValue == MONITOR_1UP_SONIC
				object[arrayPos0].propertyValue = MONITOR_1UP_KNUX
			end if
		next
	end if
	
#platform: USE_ORIGINS
	if stage.playerListPos == PLAYER_AMY
		foreach (TypeName[Monitor], arrayPos0, ALL_ENTITIES)
			if object[arrayPos0].propertyValue == MONITOR_1UP_SONIC
				object[arrayPos0].propertyValue = MONITOR_1UP_AMY
			end if
		next
	end if
#endplatform
	
	// Only 1 life in Time Attack, remove all 1UP monitors
	if options.gameMode == MODE_TIMEATTACK
		foreach (TypeName[Monitor], arrayPos0, ALL_ENTITIES)
			if object[arrayPos0].propertyValue == MONITOR_1UP_SONIC
				object[arrayPos0].type = TypeName[Blank Object]
			end if
		next
	end if
	
	if options.vsMode == true
		// Set up the monitors for VS mode
		switch vs.itemMode	
		case ITEMMODE_RANDOM
			foreach (TypeName[Monitor], arrayPos0, ALL_ENTITIES)
				object[arrayPos0].propertyValue = MONITOR_RANDOM
			next
			break
			
		case ITEMMODE_TELEPORTONLY
			foreach (TypeName[Monitor], arrayPos0, ALL_ENTITIES)
				object[arrayPos0].propertyValue = MONITOR_TELEPORT
			next
			break
			
		// (nothing will happen for ITEMMODE_NOPREFERENCE and ITEMMODE_FIXED, since the monitors should be left alone)

		end switch
	else
		// Set up the shield monitors
		if options.shieldType > SHIELDTYPE_S3
			foreach (TypeName[Monitor], arrayPos0, ALL_ENTITIES)
				object[arrayPos0].propertyValue = MONITOR_RANDOM
			next
		else
			if options.shieldType == SHIELDTYPE_S2
				foreach (TypeName[Monitor], arrayPos0, ALL_ENTITIES)
					if object[arrayPos0].propertyValue >= MONITOR_SHIELD_BUBBLE
						if object[arrayPos0].propertyValue <= MONITOR_SHIELD_LIGHTNING
							if object[arrayPos0].altContents == MONITOR_BLANK
								object[arrayPos0].type = TypeName[Blank Object]
							else
								object[arrayPos0].propertyValue = object[arrayPos0].altContents
							end if
						end if
					end if
				next
			end if
		end if
	end if

	foreach (TypeName[Monitor], arrayPos0, ALL_ENTITIES)
		object[arrayPos0].frame = object[arrayPos0].propertyValue
		object[arrayPos0].frame += 2
	next
end event


// ========================
// Editor Events
// ========================

event RSDKEdit
	if editor.returnVariable == true
		switch editor.variableID
		case EDIT_VAR_PROPVAL // property value
			checkResult = object.propertyValue
			break
			
		case 0 // contents
			checkResult = object.propertyValue
			checkResult &= 0xF
			break
			
		case 1 // altContents
			checkResult = object.propertyValue
			checkResult >>= 4
			checkResult &= 0xF
			break
			
		end switch
	else
		switch editor.variableID
		case EDIT_VAR_PROPVAL // property value
			object.propertyValue = editor.variableValue
			break
			
		case 0 // contents
			temp0 = editor.variableValue
			temp0 &= 0xF
			object.propertyValue &= 0xF0
			object.propertyValue |= temp0
			break
			
		case 1 // altContents
			temp0 = editor.variableValue
			temp0 &= 0xF
			temp0 <<= 4
			object.propertyValue &= 0xF
			object.propertyValue |= temp0
			break
		end switch
	end if
end event


event RSDKDraw
	object.frame = object.propertyValue
	object.frame &= 0xF

	DrawSprite(0)
	DrawSprite(object.frame)
end event


event RSDKLoad
	LoadSpriteSheet("Global/Items.gif")
	SpriteFrame(-16, -16, 32, 32, 18, 1) // 0 - Base monitor sprite
	SpriteFrame(-8, -9, 16, 14, 18, 66) // 1 - MONITOR_RINGS
	SpriteFrame(-8, -9, 16, 14, 35, 66) // 2 - MONITOR_SHIELD_BLUE
	SpriteFrame(-8, -9, 16, 14, 18, 81) // 3 - MONITOR_INVINCIBILITY
	SpriteFrame(-8, -9, 16, 14, 35, 81) // 4 - MONITOR_SPEEDSHOES
	SpriteFrame(-8, -9, 16, 14, 18, 96)  // 5 - MONITOR_1UP_SONIC
	SpriteFrame(-8, -9, 16, 14, 35, 96)  // 6 - MONITOR_1UP_TAILS
	SpriteFrame(-8, -9, 16, 14, 18, 111) // 7 - MONITOR_1UP_KNUX
	SpriteFrame(-8, -9, 16, 14, 35, 111) // 8 - MONITOR_SUPER
	SpriteFrame(-8, -9, 16, 14, 18, 141) // 9 - MONITOR_SHIELD_BUBBLE
	SpriteFrame(-8, -9, 16, 14, 35, 126) // 10 - MONITOR_SHIELD_FIRE
	SpriteFrame(-8, -9, 16, 14, 18, 126) // 11 - MONITOR_SHIELD_LIGHTNING
	SpriteFrame(-8, -9, 16, 14, 35, 141) // 12 - MONITOR_EGGMAN
	SpriteFrame(-8, -9, 16, 14, 18, 156) // 13 - MONITOR_TELEPORT
	SpriteFrame(-8, -9, 16, 14, 35, 156) // 14 - MONITOR_RANDOM
	SpriteFrame(-8, -9, 16, 14, 18, 171) // 15 - MONITOR_DEBUG_SHIELD
	SpriteFrame(-8, -9, 16, 14, 35, 171) // 16 - MONITOR_DEBUG_EMERALDS
	SpriteFrame(-8, -9, 16, 14, 18, 201) // 17 - MONITOR_1UP_AMY

	AddEditorVariable("contents")
	SetActiveVariable("contents")
	AddEnumVariable("None", MONITOR_BLANK)
	AddEnumVariable("10 Rings", MONITOR_RINGS)
	AddEnumVariable("Blue Shield", MONITOR_SHIELD_BLUE)
	AddEnumVariable("Invincibility", MONITOR_INVINCIBILITY)
	AddEnumVariable("Speed Shoes", MONITOR_SPEEDSHOES)
	AddEnumVariable("1UP (Sonic)", MONITOR_1UP_SONIC)
	AddEnumVariable("1UP (Tails)", MONITOR_1UP_TAILS)
	AddEnumVariable("1UP (Knux)", MONITOR_1UP_KNUX)
	AddEnumVariable("Super", MONITOR_SUPER)
	AddEnumVariable("Bubble Shield", MONITOR_SHIELD_BUBBLE)
	AddEnumVariable("Fire Shield", MONITOR_SHIELD_FIRE)
	AddEnumVariable("Lightning Shield", MONITOR_SHIELD_LIGHTNING)
	AddEnumVariable("Eggman", MONITOR_EGGMAN)
	AddEnumVariable("Teleport", MONITOR_TELEPORT)
	AddEnumVariable("Random", MONITOR_RANDOM)
	AddEnumVariable("Shields Toggle", MONITOR_DEBUG_SHIELD)

	AddEditorVariable("altContents")
	SetActiveVariable("altContents")
	AddEnumVariable("None", MONITOR_BLANK)
	AddEnumVariable("10 Rings", MONITOR_RINGS)
	AddEnumVariable("Blue Shield", MONITOR_SHIELD_BLUE)
	AddEnumVariable("Invincibility", MONITOR_INVINCIBILITY)
	AddEnumVariable("Speed Shoes", MONITOR_SPEEDSHOES)
	AddEnumVariable("1UP (Sonic)", MONITOR_1UP_SONIC)
	AddEnumVariable("1UP (Tails)", MONITOR_1UP_TAILS)
	AddEnumVariable("1UP (Knux)", MONITOR_1UP_KNUX)
	AddEnumVariable("Super", MONITOR_SUPER)
	AddEnumVariable("Bubble Shield", MONITOR_SHIELD_BUBBLE)
	AddEnumVariable("Fire Shield", MONITOR_SHIELD_FIRE)
	AddEnumVariable("Lightning Shield", MONITOR_SHIELD_LIGHTNING)
	AddEnumVariable("Eggman", MONITOR_EGGMAN)
	AddEnumVariable("Teleport", MONITOR_TELEPORT)
	AddEnumVariable("Random", MONITOR_RANDOM)
	AddEnumVariable("Shields Toggle", MONITOR_DEBUG_SHIELD)
end event
