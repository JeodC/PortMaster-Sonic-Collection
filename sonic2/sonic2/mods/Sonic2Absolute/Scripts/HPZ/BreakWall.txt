// ----------------------------------
// RSDK Project: Sonic 1/Sonic 2
// Script Description: Breakable Wall Object
// Script Author: Christan Whitehead/Simon Thomley
// Unpacked by Rubberduckycooly's script unpacker
// ----------------------------------

//-------Aliases-------//
private alias 64 : TYPE_BREAKABLEWALL

private alias object.propertyValue	: player.character // taken from current script aliases

// Function declarations
reserve function BreakableWall_DebugDraw
reserve function BreakableWall_DebugSpawn

// Static Values

// Tables

function BreakableWall_DebugDraw
	DrawSprite(0)
end function


function BreakableWall_DebugSpawn
	CreateTempObject(TypeName[Breakable Wall], 0, object.xpos, object.ypos)
	object[tempObjectPos].propertyValue = 0
	object[tempObjectPos].drawOrder = 4
end function


event ObjectMain
	if object.propertyValue > 0
		object.xpos += object.xvel
		object.ypos += object.yvel
		object.yvel += 0x7000
		if object.outOfBounds == 1
			object.type = TypeName[Blank Object]
		end if
	else
		foreach (GROUP_PLAYERS, currentPlayer, ACTIVE_ENTITIES)
			checkResult = 0
			if object[currentPlayer].state == PlayerObject_HandleRolling
				if object[currentPlayer].speed > 0x47FFF
					checkResult = 1
				end if
				if object[currentPlayer].speed < -0x47FFF
					checkResult = 1
				end if
			end if
			if player[currentPlayer].character == 2 // this *was* stage.playerListPos, but that allowed for Tails to break walls as a sidekick with Knuckles.
				checkResult = 1						// this player.character variable directly checks what player the Player Objects are.
			end if									// basically, if you are Knuckles as either character, the wall will break upon contact for only Knuckles.
			if PlayerObject_SuperState == 1
				checkResult = 1
			end if
			if checkResult == 1
				BoxCollisionTest(C_TOUCH, object.entityPos, -17, -32, 17, 32, currentPlayer, HITBOX_AUTO, HITBOX_AUTO, HITBOX_AUTO, HITBOX_AUTO)
				if checkResult == 1
					object.type = TypeName[Blank Object]
					PlaySfx(SfxName[Ledge Break], 0)
					if object[currentPlayer].xpos < object.xpos
						CreateTempObject(TypeName[Breakable Wall], 1, object.xpos, object.ypos)
						object[tempObjectPos].xvel = -0x60000
						object[tempObjectPos].yvel = -0x60000
						object[tempObjectPos].drawOrder = 4
						CreateTempObject(TypeName[Breakable Wall], 5, object.xpos, object.ypos)
						object[tempObjectPos].xvel = -0x40000
						object[tempObjectPos].yvel = -0x50000
						object[tempObjectPos].drawOrder = 4
						CreateTempObject(TypeName[Breakable Wall], 2, object.xpos, object.ypos)
						object[tempObjectPos].xvel = -0x80000
						object[tempObjectPos].yvel = -0x20000
						object[tempObjectPos].drawOrder = 4
						CreateTempObject(TypeName[Breakable Wall], 6, object.xpos, object.ypos)
						object[tempObjectPos].xvel = -0x60000
						object[tempObjectPos].yvel = -0x10000
						object[tempObjectPos].drawOrder = 4
						CreateTempObject(TypeName[Breakable Wall], 3, object.xpos, object.ypos)
						object[tempObjectPos].xvel = -0x80000
						object[tempObjectPos].yvel = 0x20000
						object[tempObjectPos].drawOrder = 4
						CreateTempObject(TypeName[Breakable Wall], 7, object.xpos, object.ypos)
						object[tempObjectPos].xvel = -0x60000
						object[tempObjectPos].yvel = 0x10000
						object[tempObjectPos].drawOrder = 4
						CreateTempObject(TypeName[Breakable Wall], 4, object.xpos, object.ypos)
						object[tempObjectPos].xvel = -0x60000
						object[tempObjectPos].yvel = 0x60000
						object[tempObjectPos].drawOrder = 4
						CreateTempObject(TypeName[Breakable Wall], 8, object.xpos, object.ypos)
						object[tempObjectPos].xvel = -0x40000
						object[tempObjectPos].yvel = 0x50000
						object[tempObjectPos].drawOrder = 4
					else
						CreateTempObject(TypeName[Breakable Wall], 1, object.xpos, object.ypos)
						object[tempObjectPos].xvel = 0x40000
						object[tempObjectPos].yvel = -0x50000
						object[tempObjectPos].drawOrder = 4
						CreateTempObject(TypeName[Breakable Wall], 5, object.xpos, object.ypos)
						object[tempObjectPos].xvel = 0x60000
						object[tempObjectPos].yvel = -0x60000
						object[tempObjectPos].drawOrder = 4
						CreateTempObject(TypeName[Breakable Wall], 2, object.xpos, object.ypos)
						object[tempObjectPos].xvel = 0x60000
						object[tempObjectPos].yvel = -0x10000
						object[tempObjectPos].drawOrder = 4
						CreateTempObject(TypeName[Breakable Wall], 6, object.xpos, object.ypos)
						object[tempObjectPos].xvel = 0x80000
						object[tempObjectPos].yvel = -0x20000
						object[tempObjectPos].drawOrder = 4
						CreateTempObject(TypeName[Breakable Wall], 3, object.xpos, object.ypos)
						object[tempObjectPos].xvel = 0x60000
						object[tempObjectPos].yvel = 0x10000
						object[tempObjectPos].drawOrder = 4
						CreateTempObject(TypeName[Breakable Wall], 7, object.xpos, object.ypos)
						object[tempObjectPos].xvel = 0x80000
						object[tempObjectPos].yvel = 0x20000
						object[tempObjectPos].drawOrder = 4
						CreateTempObject(TypeName[Breakable Wall], 4, object.xpos, object.ypos)
						object[tempObjectPos].xvel = 0x40000
						object[tempObjectPos].yvel = 0x50000
						object[tempObjectPos].drawOrder = 4
						CreateTempObject(TypeName[Breakable Wall], 8, object.xpos, object.ypos)
						object[tempObjectPos].xvel = 0x60000
						object[tempObjectPos].yvel = 0x60000
						object[tempObjectPos].drawOrder = 4
					end if
					if object[currentPlayer].animation == ANI_GLIDING
						object[currentPlayer].animation = ANI_GLIDING_DROP
						object[currentPlayer].state = PlayerObject_KnuxGlideDrop
						if object[currentPlayer].direction == FLIP_X
							FlipSign(object[currentPlayer].speed)
						end if
					end if
				end if
			else
				BoxCollisionTest(C_BOX, object.entityPos, -16, -32, 16, 32, currentPlayer, HITBOX_AUTO, HITBOX_AUTO, HITBOX_AUTO, HITBOX_AUTO)
			end if
		next
	end if
end event


event ObjectDraw
	DrawSprite(object.propertyValue)
end event


event ObjectStartup
	arrayPos0 = 32
	while arrayPos0 < 0x420
		if object[arrayPos0].type == TypeName[Breakable Wall]
			object[arrayPos0].propertyValue = 0
			object[arrayPos0].drawOrder = 4
		end if
		arrayPos0++
	loop
	if stage.actNum == 2
		LoadSpriteSheet("HPZ/Objects3.gif")
		SpriteFrame(-16, -32, 32, 64, 69, 22)
		SpriteFrame(-16, -32, 16, 16, 69, 22)
		SpriteFrame(-16, -16, 16, 16, 69, 38)
		SpriteFrame(-16,   0, 16, 16, 69, 54)
		SpriteFrame(-16,  16, 16, 16, 69, 70)
		SpriteFrame(  0, -32, 16, 16, 85, 22)
		SpriteFrame(  0, -16, 16, 16, 85, 38)
		SpriteFrame(  0,   0, 16, 16, 85, 54)
		SpriteFrame(  0,  16, 16, 16, 85, 70)
	else
		LoadSpriteSheet("HPZ/Objects.gif")
		SpriteFrame(-16, -32, 32, 64, 443, 34)
		SpriteFrame(-16, -32, 16, 16, 443, 34)
		SpriteFrame(-16, -16, 16, 16, 443, 50)
		SpriteFrame(-16,   0, 16, 16, 443, 66)
		SpriteFrame(-16,  16, 16, 16, 443, 82)
		SpriteFrame(  0, -32, 16, 16, 459, 34)
		SpriteFrame(  0, -16, 16, 16, 459, 50)
		SpriteFrame(  0,   0, 16, 16, 459, 66)
		SpriteFrame(  0,  16, 16, 16, 459, 82)
	end if
	SetTableValue(TypeName[Breakable Wall], DebugMode_ObjCount, DebugMode_TypesTable)
	SetTableValue(BreakableWall_DebugDraw, DebugMode_ObjCount, DebugMode_DrawTable)
	SetTableValue(BreakableWall_DebugSpawn, DebugMode_ObjCount, DebugMode_SpawnTable)
	DebugMode_ObjCount++
end event

event RSDKDraw
	DrawSprite(0)
end event

event RSDKLoad
	LoadSpriteSheet("Global/Display.gif")
	SpriteFrame(-16, -16, 32, 32, 1, 143)
end event
